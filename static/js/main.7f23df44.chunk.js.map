{"version":3,"sources":["Components/Header/Header.module.css","Components/NavigationBar/Navigation.module.css","assets/images/UserAvatar.png","redux/appReducer/appReducer.ts","redux/DialogsReducer/dialogsReducer.ts","API/API.ts","Components/Users/Paginator/Paginator.module.css","redux/reduxStore.ts","Components/Users/Paginator/Paginator.tsx","Components/Users/User/User.tsx","Components/Users/UsersFunc.tsx","redux/UsersReducer/usersSelectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/Header.container.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","Components/common/ListItemLink/ListItemLink.tsx","Components/NavigationBar/navigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/Users/Users.module.css","redux/AuthReducer/AuthReducer.ts","redux/UsersReducer/usersReducer.ts","Components/common/FormsControls/FormControls.module.css","Components/Login/Login.module.css","Components/common/FormsControls/FormControls.tsx","Components/common/validators/Validators.tsx","redux/ProfileReducer/profileReducer.ts"],"names":["module","exports","initialState","initialized","error","isFetching","appReducer","state","action","type","toggleIsFetching","initializeApp","dispatch","getAuthUserData","then","handleError","setError","dialogs","id","name","messages","message","addMessageActionCreator","newMessageBody","dialogsReducer","newMessage","ResultCodeEnum","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","response","data","getFriends","friend","follow","post","unFollow","delete","profileAPI","getProfile","userID","getStatus","updateStatus","status","put","saveAvatar","avatar","formData","FormData","append","saveProfile","profile","authAPI","getAuth","logIn","email","password","rememberMe","captcha","logOut","securityAPI","getCaptcha","reducers","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","usersReducer","auth","authReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","props","pagesCount","Math","ceil","totalItemsCount","portionCount","portionSize","useState","page","setPage","className","s","paginator","Pagination","count","onChange","event","value","onPageChange","siblingCount","boundaryCount","User","user","to","userId","src","userPhotoSmall","userAvatar","alt","isUserFollowed","disabled","followingInProgress","some","onClick","userName","userStatus","UsersFunc","Users","totalUsersCount","usersBlock","users","map","u","key","photos","small","followed","getUsersSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","UsersAPIContainer","pageNumber","this","React","Component","UsersContainer","connect","setCurrentPage","Header","header","loginBlock","isAuth","style","textDecorationLine","login","Button","variant","color","logout","size","marginLeft","HeaderContainer","HeaderConnect","maxLength30","maxLength","LoginReduxForm","reduxForm","handleSubmit","captchaUrl","onSubmit","loginForm","Field","placeholder","component","FormInput","validate","requiredField","FormCheckbox","label","formSummaryError","Login","formLabel","WithSuspense","Suspense","fallback","position","top","textAlign","width","CircularProgress","ListItemLink","icon","primary","onItemClickHandler","CustomLink","useMemo","forwardRef","linkProps","activeStyle","backgroundColor","ListItem","button","ListItemIcon","ListItemText","useStyles","makeStyles","theme","createStyles","root","display","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","NavigationBar","classes","useTheme","open","setOpen","handleDrawerClose","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","edge","Typography","noWrap","title","Drawer","navMenu","anchor","paper","direction","Divider","List","Dialogs","lazy","ProfileContainer","App","catchAllUnhandledRejections","promiseRejectionEvent","reason","console","log","addEventListener","removeEventListener","LinearProgress","path","exact","render","AppContainer","MainApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","setAuthUserData","setCaptchaUrl","a","responseData","resultCode","Success","CaptchaIsRequired","getCaptchaUrl","length","stopSubmit","_error","url","FOLLOW","friends","followSuccess","unFollowSuccess","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","isFollowing","setIsFollowing","items","totalCount","bind","filter","Textarea","field","hasError","meta","touched","formControl","input","control","undefined","ADD_POST","posts","likesCount","contacts","addPost","newPostBody","setUserStatus","getState","toString","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.7f23df44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__JBgSj\",\"loginBlock\":\"Header_loginBlock__1rws5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Navigation_title__1PP-p\"};","module.exports = __webpack_public_path__ + \"static/media/UserAvatar.fd4dd8c9.png\";","import {getAuthUserData} from \"../AuthReducer/AuthReducer\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'app/SET_INITIALIZED_SUCCESS';\r\nconst SET_ERROR = 'app/SET_ERROR';\r\nconst TOGGLE_IS_FETCHING = 'app/TOGGLE_IS_FETCHING';\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    initialized: false,\r\n    error: null,\r\n    isFetching: false,\r\n};\r\n\r\nexport const appReducer = (state: AuthInitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setInitializedSuccess = () => ({type: SET_INITIALIZED_SUCCESS} as const)\r\nexport const setError = (error: string | null) => ({type: SET_ERROR, error} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\n\r\n//THUNKS\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(setInitializedSuccess())\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n}\r\nexport const handleError = (error: string | null) => (dispatch: any) => {\r\n    dispatch(setError(error))\r\n}\r\n//TYPES\r\nexport type ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setInitializedSuccess>\r\n    | ReturnType<typeof setError>\r\n    | ToggleIsFetchingType\r\n\r\nexport type AuthInitialStateType = {\r\n    initialized: boolean\r\n    error: string | null\r\n    isFetching: boolean\r\n}","import {DialogsPageType, messagesType} from \"../store\";\r\n\r\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Hanna\"},\r\n        {id: 4, name: \"Lesha\"},\r\n        {id: 5, name: \"Anton\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Check Info\"},\r\n        {id: 3, message: \"How is your studying in REACT\"},\r\n        {id: 4, message: \"Hey Yo\"},\r\n        {id: 5, message: \"Good morning\"}\r\n    ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: messagesType = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string): AddMessageActionCreatorType => ({type: ADD_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer;\r\n\r\n//TYPES\r\nexport type AddMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport type DialogActionsType = AddMessageActionCreatorType\r\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": 'fcf2cb19-b7d9-4c37-999b-4dfec960c239'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    getFriends(friend: boolean = true) {\r\n        return instance.get<GetUsersResponseType>(`users?friend=${friend}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: string) {\r\n        return instance.get<GetProfileResponseType>(`profile/${userID}`).then(response => response.data)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get<string>(`profile/status/${userID}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`profile/status/`, {status}).then(response => response.data)\r\n    },\r\n    saveAvatar(avatar: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', avatar)\r\n        return instance.put<CommonResponseType<{ photos: ProfilePhotosType }>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: GetProfileResponseType) {\r\n        return instance.put<CommonResponseType>(`profile`, profile).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth () {\r\n        return instance.get<CommonResponseType<DataAuthResponseType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    logIn (email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data)\r\n    },\r\n    logOut () {\r\n        return instance.delete<CommonResponseType>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n// TYPES\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type GetProfileResponseType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: ProfilePhotosType\r\n    aboutMe: string\r\n}\r\n\r\nexport type DataAuthResponseType =  {\r\n    id: number | null\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3hdx8\"};","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer/profileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer/dialogsReducer\";\r\nimport usersReducer from \"./UsersReducer/usersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./appReducer/appReducer\";\r\nimport {authReducer} from \"./AuthReducer/AuthReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport { Pagination } from '@material-ui/lab'\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n    const portionCount = Math.ceil(pagesCount / (props.portionSize))\r\n    const [page, setPage] = useState(1)\r\n\r\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setPage(value);\r\n        props.onPageChange(value)\r\n    };\r\n\r\n    return <div className={s.paginator}>\r\n       <Pagination count={portionCount} onChange={handleChange} page={page} siblingCount={5} boundaryCount={1}/>\r\n    </div>\r\n}\r\n\r\n/*const myPaginator = () => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = [] as Array<number>\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPagePortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPagePortionNumber = portionNumber * props.portionSize\r\n\r\n    return <div>\r\n        {/!*{portionNumber > 1 &&\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPagePortionNumber && p<= rightPagePortionNumber)\r\n            .map((p, i) => <span\r\n            key={i}\r\n            className={props.currentPage === p ? s.selectedPage : s.pages}\r\n            onClick={() => {\r\n                props.onPageChange(p)\r\n            }}\r\n        >{p}</span>)}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}*!/}\r\n    </div>\r\n}*/\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    onPageChange: (pageNumber: number) => void\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userAvatar from '../../../assets/images/UserAvatar.png'\r\nimport s from \"../Users.module.css\";\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return <div className={s.user}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + props.userId}>\r\n                            <img src={props.userPhotoSmall !== null ? props.userPhotoSmall : userAvatar}\r\n                                 alt=\"avatar\"\r\n                                 className={s.avatar}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {props.isUserFollowed\r\n                            ? <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.unFollow(props.userId)\r\n                                }}\r\n                            >UnFollow</button>\r\n                            : <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.follow(props.userId)\r\n                                }}\r\n                            >Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{props.userName}</div>\r\n                        <div>{props.userStatus}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\ntype UserPropsType = {\r\n    userId: number\r\n    userPhotoSmall: string\r\n    userName: string\r\n    userStatus: string\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    isUserFollowed: boolean\r\n}","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport {Paginator} from \"./Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\ntype UsersFuncType = {\r\n    users: Array<UsersType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst UsersFunc = (props: UsersFuncType) => {\r\n\r\n    return (\r\n        <div className={s.Users}>\r\n            <div className={s.paginator}>\r\n                <Paginator totalItemsCount={props.totalUsersCount}\r\n                           pageSize={props.pageSize}\r\n                           onPageChange={props.onPageChange}\r\n                           portionSize={10}\r\n                />\r\n            </div>\r\n            <div className={s.usersBlock}>\r\n                {props.users.map(u => <User key={u.id} userId={u.id} userPhotoSmall={u.photos.small} userName={u.name}\r\n                                            userStatus={u.status} follow={props.follow} unFollow={props.unFollow}\r\n                                            followingInProgress={props.followingInProgress}\r\n                                            isUserFollowed={u.followed}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersFunc;","import {AppStateType} from \"../reduxStore\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getFollowingInProgress = (state: AppStateType) => state.usersPage.followingInProgress\r\n/*//Reselect example\r\nexport const getUsersSuperSelector = createSelector(getUsersSelector, (users: Array<UsersType>) => users.filter(u => true))*/","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {follow, getUsers, setCurrentPage, unFollow, UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport UsersFunc from \"./UsersFunc\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/UsersReducer/usersSelectors\";\r\nimport s from \"./Users.module.css\";\r\n\r\ntype UsersMapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UsersAPIPropsType = UsersMapDispatchToPropsType &\r\n    {\r\n        users: Array<UsersType>\r\n        pageSize: number\r\n        totalUsersCount: number\r\n        currentPage: number\r\n        followingInProgress: Array<number>\r\n    }\r\n\r\nclass UsersAPIContainer extends React.Component<UsersAPIPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <div className={s.UsersAPIContainer}>\r\n            <UsersFunc {...this.props} onPageChange={this.onPageChange}/>\r\n        </div>\r\n    }\r\n}\r\n\r\n/*const MapStateToProps = (state: AppStateType): UsersStateType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    };\r\n};*/\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    };\r\n};\r\n\r\nconst UsersContainer = connect(MapStateToProps,\r\n    {\r\n        follow, setCurrentPage, getUsers, unFollow\r\n    })(UsersAPIContainer);\r\n\r\nexport default UsersContainer;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    const onLogOutClick = () => {\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>You are logged in as: <span style={{textDecorationLine: 'underline'}}>{props.login}</span>\r\n                        <Button variant=\"outlined\" color={\"inherit\"} onClick={onLogOutClick} size={\"small\"} style={{marginLeft: '10px'}}>Log out</Button>\r\n                    </div>\r\n                    :<div>\r\n                        <Button variant={\"outlined\"} color={\"inherit\"} size={\"small\"}><NavLink to={'/login'}>Login</NavLink></Button>\r\n                        <Redirect to='/login'/>\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype HeaderContainerType = mapStateToPropsType & {\r\n    logout: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nconst HeaderConnect = connect(mapStateToProps, {logout})(HeaderContainer)\r\n\r\nexport default HeaderConnect;","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormCheckbox, FormInput} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../common/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className={s.Login}>\r\n        <h1>Login</h1>\r\n        <div className={s.formLabel}>\r\n            <p>To log in Enter your your login data,</p>\r\n            <p>or use common test account credentials:</p>\r\n            <p><span>Email:</span> free@samuraijs.com</p>\r\n            <p><span>Password:</span> free</p>\r\n        </div>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({handleSubmit, captchaUrl, error}) => {\r\n    return <form onSubmit={handleSubmit} className={s.loginForm}>\r\n        <div>\r\n            <Field placeholder={'Email'} name={'email'} component={FormInput}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <Field type={'password'} placeholder={'Password'} name={'password'} component={FormInput}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div className={s.rememberMe}>\r\n            <Field name={'rememberMe'} component={FormCheckbox} label={'Remember me'}/>\r\n        </div>\r\n\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl && <div>\r\n            <Field placeholder={'Enter symbols from image'} name={'captcha'} component={FormInput}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>}\r\n\r\n        {error && <div className={s.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <Button type={\"submit\"}>Login</Button>\r\n        </div>\r\n    </form>\r\n}\r\n// @ts-ignore\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n//TYPES\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginPropsType = mapStateToPropsType & {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}","import React from 'react';\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={\"secondary\"}/>\r\n        </div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};","import {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\n\r\ntype ListItemLinkPropsType = {\r\n    icon: any\r\n    primary: string\r\n    to: string\r\n    onItemClickHandler: () => void\r\n}\r\n\r\nexport function ListItemLink(props: ListItemLinkPropsType) {\r\n    const { icon, primary, to, onItemClickHandler,  } = props;\r\n   // const [isActive, setIsActive] = React.useState(false);\r\n\r\n\r\n    const CustomLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef((linkProps) => (\r\n                <NavLink to={to} {...linkProps} activeStyle={{backgroundColor: 'rgba(0, 0, 0, 0.08)'}}/>\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={CustomLink}>\r\n                <ListItemIcon onClick={() => {onItemClickHandler()}}>{icon}</ListItemIcon>\r\n                <ListItemText primary={primary} onClick={() => {onItemClickHandler()}}/>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport {ListItemLink} from \"../common/ListItemLink/ListItemLink\";\r\nimport HeaderConnect from \"../Header/Header.container\";\r\nimport s from './Navigation.module.css'\r\n\r\nconst drawerWidth = 360;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            color: 'red',\r\n        },\r\n        appBar: {\r\n            backgroundColor: '#262626',\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        drawerHeader: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(0, 1),\r\n            // necessary for content to be below app bar\r\n            ...theme.mixins.toolbar,\r\n            justifyContent: 'flex-end',\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            marginLeft: -drawerWidth,\r\n        },\r\n        contentShift: {\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            marginLeft: 0,\r\n        },\r\n    }),\r\n);\r\n\r\nexport function NavigationBar(props: any) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap className={s.title}>\r\n                        Social Network\r\n                    </Typography>\r\n                    {!open && <HeaderConnect/>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={`${classes.drawer} ${s.navMenu}`}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    <ListItemLink to={\"/profile\"} icon={<AccountBoxIcon/>} primary={'Profile'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/dialogs\"} icon={<MailIcon/>} primary={'Messages'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/users\"} icon={<PeopleIcon/>} primary={'Users'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                </List>\r\n                <Divider/>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\"\nimport store, {AppStateType} from \"./redux/reduxStore\"\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderConnect from \"./Components/Header/Header.container\";\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {handleError, initializeApp} from \"./redux/appReducer/appReducer\";\nimport {WithSuspense} from \"./hoc/WithSuspense\";\nimport {NavigationBar} from \"./Components/NavigationBar/navigationBar\";\nimport {CircularProgress, LinearProgress} from \"@material-ui/core\";\n\nconst Dialogs = React.lazy(() => import('./Components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\n\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllUnhandledRejections = (promiseRejectionEvent: any) => {\n        this.props.handleError(promiseRejectionEvent.reason.message)\n        console.log(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress color={\"secondary\"}/>\n            </div>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <NavigationBar/>\n                <HeaderConnect/>\n                {this.props.isFetching ? <div className='preLoader'><LinearProgress color={\"secondary\"}/></div> : null}\n                <div className=\"Container\">\n                    {/*ВСТАВИТЬ КНОПКУ С ЗАНУЛЕНИЕМ ОШИБКИ*/}\n                    {/*{this.props.error && <div className='error'><h4>{this.props.error}</h4></div>}*/}\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route path=\"/profile/:userId?\"\n                               render={WithSuspense(ProfileContainer)}/>\n                        <Route path=\"/dialogs\"\n                               render={WithSuspense(Dialogs)}/>\n                        <Route path=\"/users\"\n                               render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\"\n                               render={() => <Login/>}/>\n                        <Route path=\"*\" exact\n                               render={() => <div><h2>404 NOT FOUND</h2></div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    initialized: state.app.initialized,\n    error: state.app.error,\n    isFetching: state.app.isFetching,\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp, handleError})(App);\n\nexport const MainApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\n//TYPES\ntype MapStateToPropsType = {\n    initialized: boolean\n    error: string | null\n    isFetching: boolean\n}\ntype AppPropsType = MapStateToPropsType & {\n    initializeApp: () => void\n    handleError: (error: string | null) => void\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__1EjPs\",\"paginator\":\"Users_paginator__2whdk\",\"usersBlock\":\"Users_usersBlock__2qkz1\",\"user\":\"Users_user__1IPeo\",\"avatar\":\"Users_avatar__QqOhF\"};","import {authAPI, DataAuthResponseType, ResultCodeEnum, securityAPI} from \"../../API/API\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst TOGGLE_IS_FETCHING = 'auth/TOGGLE_IS_FETCHING';\r\nconst SET_CAPTCHA_URL = 'auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState: authInitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state: authInitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        }\r\n        case \"auth/SET_CAPTCHA_URL\":\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAuthUserData = (data: DataAuthResponseType): setUserDataACType => ({type: SET_USER_DATA, data})\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({type: SET_CAPTCHA_URL, captchaUrl}) as const\r\n\r\n//THUNKS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const responseData = await authAPI.getAuth()\r\n    if (responseData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData({...responseData.data, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, AppStateType, any, UsersActionsType & any> =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logIn(email, password, rememberMe, captcha)\r\n        dispatch(toggleIsFetching(false))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n        else {\r\n            if (responseData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await securityAPI.getCaptcha()\r\n    dispatch(toggleIsFetching(false))\r\n    const captchaUrl = responseData.data.url\r\n    dispatch(setCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logOut()\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setAuthUserData({isAuth: false, email: '', id: null, login: ''}))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n\r\n    }\r\n\r\n//TYPES\r\nexport type setUserDataACType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: DataAuthResponseType\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type authInitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nexport type UsersActionsType =\r\n    setUserDataACType\r\n    | toggleIsFetchingACType\r\n    | ReturnType<typeof setCaptchaUrl>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType & any>","import {usersAPI} from \"../../API/API\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\nimport {setIsFollowing} from \"../ProfileReducer/profileReducer\";\r\n\r\nconst FOLLOW = 'users/FOLLOW';\r\nconst UNFOLLOW = 'users/UNFOLLOW';\r\nconst SET_USERS = 'users/SET_USERS';\r\nconst SET_FRIENDS = 'users/SET_FRIENDS';\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 6,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    followingInProgress: [],\r\n    friends: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n        case SET_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userID)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//ACTIONS\r\nexport const followSuccess = (userID: number): FollowACType => ({type: FOLLOW, userID})\r\nexport const unFollowSuccess = (userID: number): UnFollowACType => ({type: UNFOLLOW, userID})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setFriends = (friends: Array<UsersType>) => ({type: SET_FRIENDS, friends}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountACtype => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userID: number): toggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    userID,\r\n    isFetching,\r\n})\r\n\r\n//FUNC\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any, isFollowing: boolean) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let responseData = await apiMethod(userId)\r\n    if (responseData.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n        dispatch(setIsFollowing(isFollowing))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n//THUNKS\r\nexport const getUsers = (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let responseData = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(responseData.items))\r\n        dispatch(setTotalUsersCount(responseData.totalCount))\r\n    }\r\n\r\nexport const getFriends = (friend: boolean): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let responseData = await usersAPI.getFriends(friend)\r\n        dispatch(setFriends(responseData.items))\r\n    }\r\n\r\n\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.unFollow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, unFollowSuccess, false)\r\n    }\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.follow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, followSuccess, true)\r\n    }\r\n\r\nexport default usersReducer;\r\n//TYPES\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n    friends: Array<UsersType>\r\n}\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: typeof UNFOLLOW,\r\n    userID: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport type setTotalUsersCountACtype = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport type toggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean\r\n    userID: number\r\n}\r\nexport type UsersActionsType =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | setTotalUsersCountACtype\r\n    | toggleIsFollowingProgressACType\r\n    | ReturnType<typeof setFriends>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType & any>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2X3Ug\",\"error\":\"FormControls_error__2h5_i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__2ONon\",\"loginForm\":\"Login_loginForm__393xu\",\"formSummaryError\":\"Login_formSummaryError__2G9xG\",\"rememberMe\":\"Login_rememberMe__CXtlc\",\"formLabel\":\"Login_formLabel__2N7Yu\"};","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {WrappedFieldMetaProps} from \"redux-form\"\r\nimport {FormControlLabel, TextField} from \"@material-ui/core\"\r\nimport { Input } from '@material-ui/core'\r\nimport { Checkbox } from '@material-ui/core';\r\n\r\nexport const Textarea = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <TextField {...field.input} placeholder={field.placeholder} color={\"secondary\"}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const FormInput = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <Input {...field.input} placeholder={field.placeholder} type={field.type} color={\"secondary\"}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\nexport const FormCheckbox = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <FormControlLabel\r\n            {...field.input}\r\n            control={<Checkbox name={field.name} color={\"secondary\"}/>}\r\n            label={field.label}\r\n        />\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype FieldType = {\r\n    meta: WrappedFieldMetaProps\r\n    placeholder: string | undefined\r\n    type: string\r\n    input: string\r\n    name: string\r\n    label: string\r\n}","export const requiredField: FieldValidatorType = (value) =>  value ? undefined : 'field is required'\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType =>\r\n    (value: string) => (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","import {GetProfileResponseType, profileAPI, ProfilePhotosType} from \"../../API/API\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'profile/SET_USER_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\r\nconst SET_IS_FOLLOWING = 'profile/SET_IS_FOLLOWING';\r\n\r\nexport let initialState: InitialStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are u?\", likesCount: 15},\r\n        {id: 2, message: \"It's my first post!\", likesCount: 20}\r\n    ] as Array<PostsType>,\r\n    profile: {\r\n        contacts: {},\r\n        photos: {}\r\n    } as GetProfileResponseType,\r\n    status: '',\r\n    isFollowing: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = {\r\n                id: 3,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        case \"profile/SET_IS_FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFollowing\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const addPost = (newPostBody: string): AddPostType => ({type: ADD_POST, newPostBody})\r\nexport const setUserProfile = (profile: GetProfileResponseType): SetUserProfileType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\nexport const setUserStatus = (status: string): SetUserStatusType => ({type: SET_USER_STATUS, status})\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos}) as const\r\nexport const setIsFollowing = (isFollowing: boolean) => ({type: SET_IS_FOLLOWING, isFollowing}) as const\r\n\r\n//THUNKS\r\nexport const getProfile = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.getProfile(userID)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUserProfile(responseData))\r\n    }\r\n\r\nexport const getStatus = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getStatus(userID)\r\n        dispatch(setUserStatus(responseData))\r\n    }\r\n\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.updateStatus(status)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(setUserStatus(status))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n    }\r\n\r\nexport const saveAvatar = (avatar: File): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.saveAvatar(avatar)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(responseData.data.photos))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n    }\r\n\r\nexport const saveProfile = (profile: GetProfileResponseType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const userId = getState().auth.id?.toString()\r\n        if (userId) {\r\n            const responseData = await profileAPI.saveProfile(profile)\r\n            if (responseData.resultCode === 0) {\r\n                dispatch(getProfile(userId))\r\n            } else {\r\n                const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n                // @ts-ignore\r\n                dispatch(stopSubmit('editProfile', {_error: message}))\r\n                return Promise.reject(responseData.messages[0])\r\n            }\r\n            dispatch(toggleIsFetching(false))\r\n        }\r\n    }\r\n\r\n\r\nexport default profileReducer;\r\n\r\n//TYPES\r\nexport type AddPostType = {\r\n    type: typeof ADD_POST,\r\n    newPostBody: string\r\n}\r\nexport type SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: any\r\n}\r\nexport type SetUserStatusType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n};\r\nexport type InitialStateType = {\r\n    posts: Array<PostsType>\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    isFollowing: boolean\r\n}\r\nexport type ProfileActionsType =\r\n    | AddPostType\r\n    | SetUserProfileType\r\n    | SetUserStatusType\r\n    | ReturnType<typeof savePhotoSuccess>\r\n    | ReturnType<typeof setIsFollowing>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, ProfileActionsType & any>"],"sourceRoot":""}