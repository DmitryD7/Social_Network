{"version":3,"sources":["redux/DialogsReducer/dialogsReducer.ts","API/API.ts","assets/images/UserAvatar.png","Components/Music/Music.module.css","assets/images/Spinner-1s-200px.svg","Components/NavBar/Navbar.module.css","Components/NavBar/Friends/Friends.tsx","Components/NavBar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/SideBarReducer/sideBarReducer.ts","redux/UsersReducer/usersReducer.ts","redux/AuthReducer/AuthReducer.ts","redux/appReducer/appReducer.ts","redux/reduxStore.ts","Components/Users/Paginator/Paginator.tsx","Components/Users/User/User.tsx","Components/Users/UsersFunc.tsx","redux/UsersReducer/usersSelectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/Header.container.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/common/preloader/Preloader.tsx","Components/common/FormsControls/FormControls.tsx","Components/common/validators/Validators.tsx","Components/common/FormsControls/FormControls.module.css","Components/Users/Users.module.css","Components/Users/Paginator/Paginator.module.css","Components/Login/Login.module.css","Components/NavBar/Friends/Friends.module.css","Components/Header/Header.module.css","redux/ProfileReducer/profileReducer.ts"],"names":["initialState","dialogs","id","name","messages","message","addMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","newMessage","ResultCodeEnum","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","post","unFollow","delete","profileAPI","getProfile","userID","getStatus","updateStatus","status","put","saveAvatar","avatar","formData","FormData","append","saveProfile","profile","authAPI","getAuth","logIn","email","password","rememberMe","captcha","logOut","securityAPI","getCaptcha","module","exports","Friends","props","className","s","friend","src","url","alt","NavBar","newFriends","friends","map","fr","key","nav","item","to","activeClassName","activeLink","friendsBlock","News","Music","Settings","sideBarReducer","FOLLOW","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","userId","apiMethod","actionCreator","a","resultCode","usersReducer","u","followed","filter","login","isAuth","captchaUrl","setAuthUserData","setCaptchaUrl","getAuthUserData","responseData","Success","getCaptchaUrl","initialized","error","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sideBar","usersPage","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPagePortionNumber","rightPagePortionNumber","paginator","onClick","p","selectedPage","onPageChange","User","userPhotoSmall","userAvatar","isUserFollowed","disabled","some","userName","userStatus","UsersFunc","Users","photos","small","getUsersSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIContainer","pageNumber","this","Preloader","React","Component","UsersContainer","connect","bind","page","items","totalCount","Header","header","loginBlock","logout","HeaderContainer","HeaderConnect","maxLength30","maxLength","LoginReduxForm","reduxForm","handleSubmit","onSubmit","Field","placeholder","component","Input","validate","requiredField","htmlFor","formSummaryError","CaptchaIsRequired","length","stopSubmit","_error","Login","WithSuspense","Suspense","fallback","Dialogs","lazy","ProfileContainer","App","catchAllUnhandledRejections","promiseRejectionEvent","handleError","reason","console","log","initializeApp","addEventListener","removeEventListener","getState","path","exact","render","AppContainer","setError","MainApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","style","textAlign","preLoaderIMG","Textarea","field","hasError","meta","touched","formControl","input","value","undefined","ADD_POST","posts","likesCount","contacts","addPost","newPostBody","setUserStatus","toString","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.0277358c.chunk.js","sourcesContent":["import {DialogsPageType, messagesType} from \"../store\";\r\n\r\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Hanna\"},\r\n        {id: 4, name: \"Lesha\"},\r\n        {id: 5, name: \"Anton\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Check Info\"},\r\n        {id: 3, message: \"How is your studying in REACT\"},\r\n        {id: 4, message: \"Hey Yo\"},\r\n        {id: 5, message: \"Good morning\"}\r\n    ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: messagesType = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string): AddMessageActionCreatorType => ({type: ADD_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer;\r\n\r\n//TYPES\r\nexport type AddMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport type DialogActionsType = AddMessageActionCreatorType\r\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": 'e25ce395-7836-43e0-9416-1f8978f20c93'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: string) {\r\n        return instance.get<GetProfileResponseType>(`profile/${userID}`).then(response => response.data)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get<string>(`profile/status/${userID}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`profile/status/`, {status}).then(response => response.data)\r\n    },\r\n    saveAvatar(avatar: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', avatar)\r\n        return instance.put<CommonResponseType<{ photos: ProfilePhotosType }>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: GetProfileResponseType) {\r\n        return instance.put<CommonResponseType>(`profile`, profile).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth () {\r\n        return instance.get<CommonResponseType<DataAuthResponseType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    logIn (email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data)\r\n    },\r\n    logOut () {\r\n        return instance.delete<CommonResponseType>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n// TYPES\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type GetProfileResponseType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: ProfilePhotosType\r\n    aboutMe: string\r\n}\r\n\r\nexport type DataAuthResponseType =  {\r\n    id: number | null\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/UserAvatar.fd4dd8c9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Music\":\"Music_Music__2db6E\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.2aea4710.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2-gLK\",\"item\":\"Navbar_item__1IY2Z\",\"activeLink\":\"Navbar_activeLink__2uf0U\",\"friendsBlock\":\"Navbar_friendsBlock__13N0Y\",\"friends\":\"Navbar_friends__2l3bS\"};","import React from 'react';\r\nimport s from './Friends.module.css';\r\n\r\n\r\n\r\ntype FriendsArrType = {\r\n    name: string,\r\n    url: string\r\n}\r\n\r\nfunction Friends(props: FriendsArrType) {\r\n    return (\r\n        <div className={s.friend}>\r\n            <span>{props.name}</span>\r\n            <img className={s.avatar} src={props.url} alt=\"avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"./Friends/Friends\";\r\n\r\n\r\ntype friendType = {\r\n    id: number,\r\n    name: string,\r\n    url: string\r\n};\r\ntype SideBarType = {\r\n    friends: Array<friendType>\r\n};\r\n\r\nconst NavBar = (props: SideBarType) => {\r\n\r\n\r\n    let newFriends = props.friends.map(fr => <Friends name={fr.name} url={fr.url} key={fr.id}/>)\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.friendsBlock}>\r\n                Friends:\r\n                <div className={s.friends}>\r\n                    {newFriends}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={s.Music}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import {SideBarType} from \"../store\";\r\n\r\nexport type SideBarActionsType = {};\r\n\r\nlet initialState: SideBarType = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Max\",\r\n            url: \"https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Alex\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQY3-T5CGnvt9BKaAd3BtwiHmxLYTYXwfFnYmR88G3LXq9aUEg6&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Hanna\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSATQJC564l8QfGaYWecO6SG96pX0E4otgA6EO25MS4ABRa2pd7&usqp=CAU\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst sideBarReducer = (state = initialState, action:SideBarActionsType):SideBarType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sideBarReducer;","import {usersAPI} from \"../../API/API\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'users/FOLLOW';\r\nconst UNFOLLOW = 'users/UNFOLLOW';\r\nconst SET_USERS = 'users/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userID)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//ACTIONS\r\nexport const followSuccess = (userID: number): FollowACType => ({type: FOLLOW, userID})\r\nexport const unFollowSuccess = (userID: number): UnFollowACType => ({type: UNFOLLOW, userID})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountACtype => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingACtype => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userID: number): toggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    userID,\r\n    isFetching,\r\n})\r\n\r\n//FUNC\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let responseData = await apiMethod(userId)\r\n    if (responseData.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n//THUNKS\r\nexport const getUsers = (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let responseData = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(responseData.items))\r\n        dispatch(setTotalUsersCount(responseData.totalCount))\r\n    }\r\n\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.unFollow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, unFollowSuccess)\r\n    }\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.follow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n\r\nexport default usersReducer;\r\n//TYPES\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    photos: any\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: typeof UNFOLLOW,\r\n    userID: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport type setTotalUsersCountACtype = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport type toggleIsFetchingACtype = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type toggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean\r\n    userID: number\r\n}\r\nexport type UsersActionsType =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | setTotalUsersCountACtype\r\n    | toggleIsFetchingACtype\r\n    | toggleIsFollowingProgressACType\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType>","import {authAPI, DataAuthResponseType, ResultCodeEnum, securityAPI} from \"../../API/API\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst TOGGLE_IS_FETCHING = 'auth/TOGGLE_IS_FETCHING';\r\nconst SET_CAPTCHA_URL = 'auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState: authInitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state: authInitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        }\r\n        case \"auth/SET_CAPTCHA_URL\":\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAuthUserData = (data: DataAuthResponseType): setUserDataACType => ({type: SET_USER_DATA, data})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({type: SET_CAPTCHA_URL, captchaUrl}) as const\r\n\r\n//THUNKS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await authAPI.getAuth()\r\n    dispatch(toggleIsFetching(false))\r\n    if (responseData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData({...responseData.data, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, AppStateType, any, UsersActionsType & any> =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logIn(email, password, rememberMe, captcha)\r\n        dispatch(toggleIsFetching(false))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n        else {\r\n            if (responseData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await securityAPI.getCaptcha()\r\n    dispatch(toggleIsFetching(false))\r\n    const captchaUrl = responseData.data.url\r\n    dispatch(setCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logOut()\r\n        dispatch(toggleIsFetching(true))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setAuthUserData({isAuth: false, email: '', id: null, login: ''}))\r\n        }\r\n\r\n    }\r\n\r\n//TYPES\r\nexport type setUserDataACType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: DataAuthResponseType\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type authInitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching?: boolean\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nexport type UsersActionsType =\r\n    setUserDataACType\r\n    | toggleIsFetchingACType\r\n    | ReturnType<typeof setCaptchaUrl>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType>","import {getAuthUserData} from \"../AuthReducer/AuthReducer\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'app/SET_INITIALIZED_SUCCESS';\r\nconst SET_ERROR = 'app/SET_ERROR';\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    initialized: false,\r\n    error: null\r\n};\r\n\r\nexport const appReducer = (state: AuthInitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setInitializedSuccess = () => ({type: SET_INITIALIZED_SUCCESS} as const)\r\nexport const setError = (error: string | null) => ({type: SET_ERROR, error} as const)\r\n\r\n//THUNKS\r\nexport const initializeApp = () => (dispatch: any) =>\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(setInitializedSuccess())\r\n        })\r\nexport const handleError = (error: string | null) => (dispatch: any) => {\r\n    dispatch(setError(error))\r\n}\r\n//TYPES\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setInitializedSuccess>\r\n    | ReturnType<typeof setError>\r\n\r\nexport type AuthInitialStateType = {\r\n    initialized: boolean\r\n    error: string | null\r\n}","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer/profileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer/dialogsReducer\";\r\nimport sideBarReducer from \"./SideBarReducer/sideBarReducer\";\r\nimport usersReducer from \"./UsersReducer/usersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./appReducer/appReducer\";\r\nimport {authReducer} from \"./AuthReducer/AuthReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / (props.portionSize))\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPagePortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPagePortionNumber = portionNumber * props.portionSize\r\n\r\n    return <div className={s.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPagePortionNumber && p<= rightPagePortionNumber)\r\n            .map((p, i) => <span\r\n            key={i}\r\n            className={props.currentPage === p ? s.selectedPage : s.pages}\r\n            onClick={() => {\r\n                props.onPageChange(p)\r\n            }}\r\n        >{p}</span>)}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    onPageChange: (pageNumber: number) => void\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userAvatar from '../../../assets/images/UserAvatar.png'\r\nimport s from \"../Users.module.css\";\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return <div key={props.userId}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + props.userId}>\r\n                            <img src={props.userPhotoSmall !== null ? props.userPhotoSmall : userAvatar}\r\n                                 alt=\"avatar\"\r\n                                 className={s.avatar}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {props.isUserFollowed\r\n                            ? <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.unFollow(props.userId)\r\n                                }}\r\n                            >UnFollow</button>\r\n                            : <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.follow(props.userId)\r\n                                }}\r\n                            >Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{props.userName}</div>\r\n                        <div>{props.userStatus}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\ntype UserPropsType = {\r\n    userId: number\r\n    userPhotoSmall: string\r\n    userName: string\r\n    userStatus: string\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    isUserFollowed: boolean\r\n}","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport {Paginator} from \"./Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\ntype UsersFuncType = {\r\n    users: Array<UsersType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst UsersFunc = (props: UsersFuncType) => {\r\n\r\n    return (\r\n        <div className={s.Users}>\r\n            <Paginator currentPage={props.currentPage}\r\n                       totalItemsCount={props.totalUsersCount}\r\n                       pageSize={props.pageSize}\r\n                       onPageChange={props.onPageChange}\r\n                       portionSize={10}\r\n            />\r\n\r\n            {props.users.map(u => <User key={u.id} userId={u.id} userPhotoSmall={u.photos.small} userName={u.name}\r\n                                        userStatus={u.status} follow={props.follow} unFollow={props.unFollow}\r\n                                        followingInProgress={props.followingInProgress} isUserFollowed={u.followed}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersFunc;","import {AppStateType} from \"../reduxStore\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getIsFetching = (state: AppStateType) => state.usersPage.isFetching\r\nexport const getFollowingInProgress = (state: AppStateType) => state.usersPage.followingInProgress\r\n/*//Reselect example\r\nexport const getUsersSuperSelector = createSelector(getUsersSelector, (users: Array<UsersType>) => users.filter(u => true))*/","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unFollow,\r\n    UsersStateType,\r\n    UsersType\r\n} from \"../../redux/UsersReducer/usersReducer\";\r\nimport UsersFunc from \"./UsersFunc\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/UsersReducer/usersSelectors\";\r\n\r\ntype UsersMapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UsersAPIPropsType = UsersMapDispatchToPropsType &\r\n    {\r\n        users: Array<UsersType>\r\n        pageSize: number\r\n        totalUsersCount: number\r\n        currentPage: number\r\n        isFetching: boolean\r\n        followingInProgress: Array<number>\r\n    }\r\n\r\nclass UsersAPIContainer extends React.Component<UsersAPIPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <UsersFunc {...this.props} onPageChange={this.onPageChange}/>\r\n        </>\r\n    }\r\n}\r\n\r\n/*const MapStateToProps = (state: AppStateType): UsersStateType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    };\r\n};*/\r\nconst MapStateToProps = (state: AppStateType): UsersStateType => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage:getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    };\r\n};\r\n\r\nconst UsersContainer = connect(MapStateToProps,\r\n    {\r\n        follow, setCurrentPage, getUsers, unFollow\r\n    })(UsersAPIContainer);\r\n\r\nexport default UsersContainer;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Approve_icon.svg/1024px-Approve_icon.svg.png\"\r\n                alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype HeaderContainerType = mapStateToPropsType & {\r\n    logout: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nconst HeaderConnect = connect(mapStateToProps, {logout})(HeaderContainer)\r\n\r\nexport default HeaderConnect;","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../common/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className={s.Login}>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({handleSubmit, captchaUrl, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Email'} name={'email'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <Field type={'password'} placeholder={'Password'} name={'password'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div className={s.rememberMe}>\r\n            <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n            <label htmlFor={'rememberMe'}>remember me</label>\r\n        </div>\r\n\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl && <div>\r\n            <Field placeholder={'Enter symbols from image'} name={'captcha'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>}\r\n\r\n        {error && <div className={s.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <button>Log in</button>\r\n        </div>\r\n    </form>\r\n}\r\n// @ts-ignore\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n//TYPES\r\ntype LoginFormPropsType  = {\r\n    captchaUrl: string | null\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginPropsType = mapStateToPropsType & {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}","import React from 'react';\r\nimport Preloader from \"../Components/common/preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};","import React from 'react';\nimport './App.css';\nimport NavBar from \"./Components/NavBar/Navbar\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\"\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport Settings from \"./Components/Settings/Settings\";\nimport store, {AppStateType} from \"./redux/reduxStore\"\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderConnect from \"./Components/Header/Header.container\";\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {handleError, initializeApp} from \"./redux/appReducer/appReducer\";\nimport Preloader from \"./Components/common/preloader/Preloader\";\nimport {WithSuspense} from \"./hoc/WithSuspense\";\n\nconst Dialogs = React.lazy(() => import('./Components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\n\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllUnhandledRejections = (promiseRejectionEvent: any) => {\n        this.props.handleError(promiseRejectionEvent.reason.message)\n        console.log(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderConnect/>\n                <NavBar friends={store.getState().sideBar.friends}/>\n                <div className=\"app-wrapper-content\">\n                    {/*ВСТАВИТЬ КНОПКУ С ЗАНУЛЕНИЕМ ОШИБКИ*/}\n                    {this.props.error && <div className='error'><h4>{this.props.error}</h4></div>}\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route path=\"/profile/:userId?\"\n                               render={WithSuspense(ProfileContainer)}/>\n                        <Route path=\"/dialogs\"\n                               render={WithSuspense(Dialogs)}/>\n                        <Route path=\"/news\"\n                               render={() => <News/>}/>\n                        <Route path=\"/music\"\n                               render={() => <Music/>}/>\n                        <Route path=\"/settings\"\n                               render={() => <Settings/>}/>\n                        <Route path=\"/users\"\n                               render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\"\n                               render={() => <Login/>}/>\n                        <Route path=\"*\" exact\n                               render={() => <div><h2>404 NOT FOUND</h2></div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    initialized: state.app.initialized,\n    error: state.app.error,\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp, handleError})(App);\n\nexport const MainApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\n//TYPES\ntype MapStateToPropsType = {\n    initialized: boolean\n    error: string | null\n}\ntype AppPropsType = MapStateToPropsType & {\n    initializeApp: () => void\n    handleError: (error: string | null) => void\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport preLoaderIMG from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\ntype PreloaderType = {}\r\n\r\nfunction Preloader(props: PreloaderType) {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <img src={preLoaderIMG}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\n\r\nexport const Textarea = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <textarea {...field.input} placeholder={field.placeholder}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const Input = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <input {...field.input} placeholder={field.placeholder} type={field.type}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype FieldType = {\r\n    meta: WrappedFieldMetaProps\r\n    /*{\r\n        touched: boolean\r\n        error: string\r\n    }*/\r\n    placeholder: string | undefined\r\n    type: string\r\n    input: string\r\n}","export const requiredField: FieldValidatorType = (value) =>  value ? undefined : 'field is required'\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType =>\r\n    (value: string) => (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__WdyDc\",\"error\":\"FormControls_error__V-zm-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__2cuDz\",\"avatar\":\"Users_avatar__2HfKL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2D4Jk\",\"selectedPage\":\"Paginator_selectedPage__2MfDb\",\"pages\":\"Paginator_pages__PyTHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__swwEc\",\"formSummaryError\":\"Login_formSummaryError__3bWIJ\",\"rememberMe\":\"Login_rememberMe__1rtkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friends_friend__2I21y\",\"avatar\":\"Friends_avatar__3m4Ru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1StkQ\",\"loginBlock\":\"Header_loginBlock__1nhp4\"};","import {GetProfileResponseType, profileAPI, ProfilePhotosType} from \"../../API/API\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'profile/SET_USER_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\r\n\r\nexport let initialState: InitialStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are u?\", likesCount: 15},\r\n        {id: 2, message: \"It's my first post!\", likesCount: 20}\r\n    ] as Array<PostsType>,\r\n    profile: {\r\n        contacts: {},\r\n        photos: {}\r\n    } as GetProfileResponseType,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = {\r\n                id: 3,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const addPost = (newPostBody: string): AddPostType => ({type: ADD_POST, newPostBody})\r\nexport const setUserProfile = (profile: GetProfileResponseType): SetUserProfileType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\nexport const setUserStatus = (status: string): SetUserStatusType => ({type: SET_USER_STATUS, status})\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos}) as const\r\n\r\n//THUNKS\r\nexport const getProfile = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getProfile(userID)\r\n        dispatch(setUserProfile(responseData))\r\n    }\r\n\r\nexport const getStatus = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getStatus(userID)\r\n        dispatch(setUserStatus(responseData))\r\n    }\r\n\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.updateStatus(status)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(setUserStatus(status))\r\n        }\r\n    }\r\n\r\nexport const saveAvatar = (avatar: File): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.saveAvatar(avatar)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(responseData.data.photos))\r\n        }\r\n    }\r\n\r\nexport const saveProfile = (profile: GetProfileResponseType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const userId = getState().auth.id?.toString()\r\n        if (userId) {\r\n            const responseData = await profileAPI.saveProfile(profile)\r\n            if (responseData.resultCode === 0) {\r\n                dispatch(getProfile(userId))\r\n            } else {\r\n                const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n                // @ts-ignore\r\n                dispatch(stopSubmit('editProfile', {_error: message}))\r\n                return Promise.reject(responseData.messages[0])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nexport default profileReducer;\r\n\r\n//TYPES\r\nexport type AddPostType = {\r\n    type: typeof ADD_POST,\r\n    newPostBody: string\r\n}\r\nexport type SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: any\r\n}\r\nexport type SetUserStatusType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n};\r\nexport type InitialStateType = {\r\n    posts: Array<PostsType>\r\n    profile: GetProfileResponseType\r\n    status: string\r\n}\r\nexport type ProfileActionsType =\r\n    | AddPostType\r\n    | SetUserProfileType\r\n    | SetUserStatusType\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, ProfileActionsType>"],"sourceRoot":""}