{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Message/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","messageEl","messageAvatar","src","alt","message","maxLength10","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","addMessage","newMessageBody","mapStateToPropsForRedirect","state","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,UAAY,2BAA2B,QAAU,yBAAyB,cAAgB,iC,+FCgBpRC,EATqC,SAACC,GACjD,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCKvBC,EAVC,SAACT,GACb,OACI,yBAAKG,UAAWC,IAAEM,WACd,yBAAKP,UAAWC,IAAEO,cAAeC,IAAI,qDAAqDC,IAAI,eAC9F,yBAAKV,UAAWC,IAAEU,SAAUd,EAAMc,W,0CCFxCC,EAAcC,YAAU,IAoBjBC,EAAsBC,YAAkC,CAACC,KAAM,wBAAzCD,EAlByC,SAAClB,GACzE,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,6BACI,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXhB,KAAM,iBACNiB,YAAa,qBACbC,SAAU,CAACC,IAAeZ,MAGlC,6BACI,6CCiBDa,MAxBf,SAAiB5B,GAEb,IAAI6B,EAAkB7B,EAAM8B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYzB,KAAMyB,EAAEzB,KAAMN,GAAI+B,EAAE/B,GAAIgC,IAAKD,EAAE/B,QAChGiC,EAAmBnC,EAAM8B,YAAYM,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAEnC,QAM/F,OAAKF,EAAMsC,OAGP,yBAAKnC,UAAWC,IAAE2B,SACd,yBAAK5B,UAAWC,IAAEmC,cACbV,GAEL,yBAAK1B,UAAWC,IAAEgC,UACbD,EACD,kBAAClB,EAAD,CAAqBG,SAbb,SAACoB,GACjBxC,EAAMyC,WAAWD,EAAOE,qBAGF,kBAAC,IAAD,CAAUnC,GAAI,Y,wCChBtCoC,EAA6B,SAACC,GAAD,MAAuD,CACtFN,OAAQM,EAAMC,KAAKP,SAgBRQ,EAbiB,SAACC,GAAoB,IAC3CC,EAD0C,uKAGxC,OAAKC,KAAKjD,MAAMsC,OACT,kBAACS,EAAcE,KAAKjD,OADI,kBAAC,IAAD,CAAUO,GAAI,eAHL,GAChB2C,IAAMH,WAQtC,OADqCI,YAAQR,EAARQ,CAAoCH,I,OCU9DI,sBACXD,aAfoB,SAACP,GACrB,MAAO,CACHd,YAAac,EAAMd,gBAIA,SAACuB,GACxB,MAAO,CACHZ,WAAY,SAACC,GACTW,EAASC,YAAwBZ,SAOzCI,EAFWM,CAGbxB","file":"static/js/4.39e15806.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3516e\",\"dialogsItems\":\"Dialogs_dialogsItems__1F90g\",\"active\":\"Dialogs_active__2isOl\",\"dialog\":\"Dialogs_dialog__7oepE\",\"messages\":\"Dialogs_messages__2lDoW\",\"messageEl\":\"Dialogs_messageEl__3nc__\",\"message\":\"Dialogs_message__36_Bf\",\"messageAvatar\":\"Dialogs_messageAvatar__3lX8b\"};","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsTypes = {\r\n    name: string,\r\n    id: number,\r\n}\r\nconst DialogItem: React.FC <DialogItemPropsTypes> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\n\r\ntype MessagePropsTypes = {\r\n    message: string,\r\n}\r\nconst Message = (props: MessagePropsTypes) => {\r\n    return (\r\n        <div className={s.messageEl}>\r\n            <img className={s.messageAvatar} src=\"https://i.ya-webdesign.com/images/avatar-png-1.png\" alt=\"avatarIcon\"/>\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../../common/validators/Validators\";\r\n\r\nexport type AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newMessageBody'}\r\n                    placeholder={'Enter your message'}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AddMessageFormDataType, AddMessageFormRedux} from \"./Message/AddMessageForm\";\r\n\r\n\r\ntype DialogsPagePropsType = {\r\n    dialogsPage: DialogsPageType,\r\n    addMessage: (newMessageBody: string) => void,\r\n    isAuth: boolean\r\n};\r\n\r\n\r\nfunction Dialogs(props: DialogsPagePropsType) {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {Component, JSXElementConstructor} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype RedirectMapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): RedirectMapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nimport {addMessageActionCreator} from \"../../redux/DialogsReducer/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from 'redux';\r\n\r\ntype DialogsMapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\ntype DialogsMapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): DialogsMapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): DialogsMapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<any>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}