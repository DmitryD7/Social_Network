{"version":3,"sources":["Components/Users/Paginator/Paginator.module.css","Components/Login/Login.module.css","Components/Header/Header.module.css","assets/images/UserAvatar.png","redux/ProfileReducer/profileReducer.ts","redux/DialogsReducer/dialogsReducer.ts","assets/images/Spinner-1s-200px.svg","API/API.ts","redux/SideBarReducer/sideBarReducer.ts","redux/AuthReducer/AuthReducer.ts","redux/appReducer/appReducer.ts","redux/reduxStore.ts","Components/Users/Paginator/Paginator.tsx","Components/Users/User/User.tsx","Components/Users/UsersFunc.tsx","Components/common/preloader/Preloader.tsx","redux/UsersReducer/usersSelectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/Header.container.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","Components/common/ListItemLink/ListItemLink.tsx","Components/NavigationBar/navigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx","redux/UsersReducer/usersReducer.ts","Components/common/FormsControls/FormControls.tsx","Components/common/validators/Validators.tsx","Components/common/FormsControls/FormControls.module.css","Components/Users/Users.module.css"],"names":["module","exports","ADD_POST","initialState","posts","id","message","likesCount","profile","contacts","photos","status","addPost","newPostBody","type","setUserStatus","getProfile","userID","dispatch","a","profileAPI","responseData","getStatus","updateStatus","resultCode","saveAvatar","avatar","data","saveProfile","getState","userId","auth","toString","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","dialogs","name","addMessageActionCreator","newMessageBody","dialogsReducer","newMessage","ResultCodeEnum","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","getFriends","friend","follow","post","unFollow","delete","put","formData","FormData","append","authAPI","getAuth","logIn","email","password","rememberMe","captcha","logOut","securityAPI","getCaptcha","friends","url","sideBarReducer","login","isFetching","isAuth","captchaUrl","setAuthUserData","toggleIsFetching","setCaptchaUrl","getAuthUserData","Success","getCaptchaUrl","initialized","error","reducers","combineReducers","profilePage","dialogsPage","sideBar","usersPage","usersReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","props","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPagePortionNumber","rightPagePortionNumber","className","s","paginator","onClick","filter","p","map","key","selectedPage","onPageChange","User","to","src","userPhotoSmall","userAvatar","alt","isUserFollowed","disabled","followingInProgress","some","userName","userStatus","UsersFunc","Users","totalUsersCount","users","u","small","followed","Preloader","style","textAlign","preLoaderIMG","getUsersSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIContainer","pageNumber","this","React","Component","UsersContainer","connect","setCurrentPage","Header","header","loginBlock","textDecorationLine","Button","variant","color","logout","size","marginLeft","HeaderContainer","HeaderConnect","maxLength30","maxLength","LoginReduxForm","reduxForm","handleSubmit","onSubmit","Field","placeholder","component","Input","validate","requiredField","htmlFor","formSummaryError","CaptchaIsRequired","Login","WithSuspense","Suspense","fallback","ListItemLink","icon","primary","onItemClickHandler","CustomLink","useMemo","forwardRef","linkProps","activeStyle","backgroundColor","ListItem","button","ListItemIcon","ListItemText","useStyles","makeStyles","theme","createStyles","root","display","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","width","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","NavigationBar","classes","useTheme","open","setOpen","handleDrawerClose","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Drawer","anchor","paper","direction","Divider","List","Dialogs","lazy","ProfileContainer","App","catchAllUnhandledRejections","promiseRejectionEvent","handleError","reason","console","log","initializeApp","addEventListener","removeEventListener","path","exact","render","top","CircularProgress","AppContainer","setError","MainApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FOLLOW","followSuccess","unFollowSuccess","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","page","items","totalCount","bind","Textarea","field","hasError","meta","touched","formControl","input","value","undefined"],"mappings":"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","file":"static/js/main.1427c352.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2D4Jk\",\"selectedPage\":\"Paginator_selectedPage__2MfDb\",\"pages\":\"Paginator_pages__PyTHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__swwEc\",\"formSummaryError\":\"Login_formSummaryError__3bWIJ\",\"rememberMe\":\"Login_rememberMe__1rtkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1StkQ\",\"loginBlock\":\"Header_loginBlock__1nhp4\"};","module.exports = __webpack_public_path__ + \"static/media/UserAvatar.fd4dd8c9.png\";","import {GetProfileResponseType, profileAPI, ProfilePhotosType} from \"../../API/API\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'profile/SET_USER_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\r\n\r\nexport let initialState: InitialStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are u?\", likesCount: 15},\r\n        {id: 2, message: \"It's my first post!\", likesCount: 20}\r\n    ] as Array<PostsType>,\r\n    profile: {\r\n        contacts: {},\r\n        photos: {}\r\n    } as GetProfileResponseType,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = {\r\n                id: 3,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const addPost = (newPostBody: string): AddPostType => ({type: ADD_POST, newPostBody})\r\nexport const setUserProfile = (profile: GetProfileResponseType): SetUserProfileType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\nexport const setUserStatus = (status: string): SetUserStatusType => ({type: SET_USER_STATUS, status})\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos}) as const\r\n\r\n//THUNKS\r\nexport const getProfile = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getProfile(userID)\r\n        dispatch(setUserProfile(responseData))\r\n    }\r\n\r\nexport const getStatus = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getStatus(userID)\r\n        dispatch(setUserStatus(responseData))\r\n    }\r\n\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.updateStatus(status)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(setUserStatus(status))\r\n        }\r\n    }\r\n\r\nexport const saveAvatar = (avatar: File): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.saveAvatar(avatar)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(responseData.data.photos))\r\n        }\r\n    }\r\n\r\nexport const saveProfile = (profile: GetProfileResponseType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const userId = getState().auth.id?.toString()\r\n        if (userId) {\r\n            const responseData = await profileAPI.saveProfile(profile)\r\n            if (responseData.resultCode === 0) {\r\n                dispatch(getProfile(userId))\r\n            } else {\r\n                const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n                // @ts-ignore\r\n                dispatch(stopSubmit('editProfile', {_error: message}))\r\n                return Promise.reject(responseData.messages[0])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nexport default profileReducer;\r\n\r\n//TYPES\r\nexport type AddPostType = {\r\n    type: typeof ADD_POST,\r\n    newPostBody: string\r\n}\r\nexport type SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: any\r\n}\r\nexport type SetUserStatusType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n};\r\nexport type InitialStateType = {\r\n    posts: Array<PostsType>\r\n    profile: GetProfileResponseType\r\n    status: string\r\n}\r\nexport type ProfileActionsType =\r\n    | AddPostType\r\n    | SetUserProfileType\r\n    | SetUserStatusType\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, ProfileActionsType>","import {DialogsPageType, messagesType} from \"../store\";\r\n\r\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Hanna\"},\r\n        {id: 4, name: \"Lesha\"},\r\n        {id: 5, name: \"Anton\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Check Info\"},\r\n        {id: 3, message: \"How is your studying in REACT\"},\r\n        {id: 4, message: \"Hey Yo\"},\r\n        {id: 5, message: \"Good morning\"}\r\n    ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: messagesType = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string): AddMessageActionCreatorType => ({type: ADD_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer;\r\n\r\n//TYPES\r\nexport type AddMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport type DialogActionsType = AddMessageActionCreatorType\r\n","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.2aea4710.svg\";","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": 'e25ce395-7836-43e0-9416-1f8978f20c93'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    getFriends(friend: boolean = true) {\r\n        return instance.get<GetUsersResponseType>(`users?friend=${friend}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: string) {\r\n        return instance.get<GetProfileResponseType>(`profile/${userID}`).then(response => response.data)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get<string>(`profile/status/${userID}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`profile/status/`, {status}).then(response => response.data)\r\n    },\r\n    saveAvatar(avatar: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', avatar)\r\n        return instance.put<CommonResponseType<{ photos: ProfilePhotosType }>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: GetProfileResponseType) {\r\n        return instance.put<CommonResponseType>(`profile`, profile).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth () {\r\n        return instance.get<CommonResponseType<DataAuthResponseType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    logIn (email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data)\r\n    },\r\n    logOut () {\r\n        return instance.delete<CommonResponseType>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n// TYPES\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type GetProfileResponseType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: ProfilePhotosType\r\n    aboutMe: string\r\n}\r\n\r\nexport type DataAuthResponseType =  {\r\n    id: number | null\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n","import {SideBarType} from \"../store\";\r\n\r\nexport type SideBarActionsType = {};\r\n\r\nlet initialState: SideBarType = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Max\",\r\n            url: \"https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Alex\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQY3-T5CGnvt9BKaAd3BtwiHmxLYTYXwfFnYmR88G3LXq9aUEg6&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Hanna\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSATQJC564l8QfGaYWecO6SG96pX0E4otgA6EO25MS4ABRa2pd7&usqp=CAU\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst sideBarReducer = (state = initialState, action:SideBarActionsType):SideBarType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sideBarReducer;","import {authAPI, DataAuthResponseType, ResultCodeEnum, securityAPI} from \"../../API/API\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst TOGGLE_IS_FETCHING = 'auth/TOGGLE_IS_FETCHING';\r\nconst SET_CAPTCHA_URL = 'auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState: authInitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state: authInitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        }\r\n        case \"auth/SET_CAPTCHA_URL\":\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAuthUserData = (data: DataAuthResponseType): setUserDataACType => ({type: SET_USER_DATA, data})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({type: SET_CAPTCHA_URL, captchaUrl}) as const\r\n\r\n//THUNKS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await authAPI.getAuth()\r\n    dispatch(toggleIsFetching(false))\r\n    if (responseData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData({...responseData.data, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, AppStateType, any, UsersActionsType & any> =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logIn(email, password, rememberMe, captcha)\r\n        dispatch(toggleIsFetching(false))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n        else {\r\n            if (responseData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await securityAPI.getCaptcha()\r\n    dispatch(toggleIsFetching(false))\r\n    const captchaUrl = responseData.data.url\r\n    dispatch(setCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logOut()\r\n        dispatch(toggleIsFetching(true))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setAuthUserData({isAuth: false, email: '', id: null, login: ''}))\r\n        }\r\n\r\n    }\r\n\r\n//TYPES\r\nexport type setUserDataACType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: DataAuthResponseType\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type authInitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching?: boolean\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nexport type UsersActionsType =\r\n    setUserDataACType\r\n    | toggleIsFetchingACType\r\n    | ReturnType<typeof setCaptchaUrl>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType>","import {getAuthUserData} from \"../AuthReducer/AuthReducer\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'app/SET_INITIALIZED_SUCCESS';\r\nconst SET_ERROR = 'app/SET_ERROR';\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    initialized: false,\r\n    error: null\r\n};\r\n\r\nexport const appReducer = (state: AuthInitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setInitializedSuccess = () => ({type: SET_INITIALIZED_SUCCESS} as const)\r\nexport const setError = (error: string | null) => ({type: SET_ERROR, error} as const)\r\n\r\n//THUNKS\r\nexport const initializeApp = () => (dispatch: any) =>\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(setInitializedSuccess())\r\n        })\r\nexport const handleError = (error: string | null) => (dispatch: any) => {\r\n    dispatch(setError(error))\r\n}\r\n//TYPES\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setInitializedSuccess>\r\n    | ReturnType<typeof setError>\r\n\r\nexport type AuthInitialStateType = {\r\n    initialized: boolean\r\n    error: string | null\r\n}","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer/profileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer/dialogsReducer\";\r\nimport sideBarReducer from \"./SideBarReducer/sideBarReducer\";\r\nimport usersReducer from \"./UsersReducer/usersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./appReducer/appReducer\";\r\nimport {authReducer} from \"./AuthReducer/AuthReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / (props.portionSize))\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPagePortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPagePortionNumber = portionNumber * props.portionSize\r\n\r\n    return <div className={s.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPagePortionNumber && p<= rightPagePortionNumber)\r\n            .map((p, i) => <span\r\n            key={i}\r\n            className={props.currentPage === p ? s.selectedPage : s.pages}\r\n            onClick={() => {\r\n                props.onPageChange(p)\r\n            }}\r\n        >{p}</span>)}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    onPageChange: (pageNumber: number) => void\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userAvatar from '../../../assets/images/UserAvatar.png'\r\nimport s from \"../Users.module.css\";\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return <div key={props.userId}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + props.userId}>\r\n                            <img src={props.userPhotoSmall !== null ? props.userPhotoSmall : userAvatar}\r\n                                 alt=\"avatar\"\r\n                                 className={s.avatar}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {props.isUserFollowed\r\n                            ? <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.unFollow(props.userId)\r\n                                }}\r\n                            >UnFollow</button>\r\n                            : <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.follow(props.userId)\r\n                                }}\r\n                            >Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{props.userName}</div>\r\n                        <div>{props.userStatus}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\ntype UserPropsType = {\r\n    userId: number\r\n    userPhotoSmall: string\r\n    userName: string\r\n    userStatus: string\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    isUserFollowed: boolean\r\n}","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport {Paginator} from \"./Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\ntype UsersFuncType = {\r\n    users: Array<UsersType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst UsersFunc = (props: UsersFuncType) => {\r\n\r\n    return (\r\n        <div className={s.Users}>\r\n            <Paginator currentPage={props.currentPage}\r\n                       totalItemsCount={props.totalUsersCount}\r\n                       pageSize={props.pageSize}\r\n                       onPageChange={props.onPageChange}\r\n                       portionSize={10}\r\n            />\r\n\r\n            {props.users.map(u => <User key={u.id} userId={u.id} userPhotoSmall={u.photos.small} userName={u.name}\r\n                                        userStatus={u.status} follow={props.follow} unFollow={props.unFollow}\r\n                                        followingInProgress={props.followingInProgress} isUserFollowed={u.followed}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersFunc;","import React from 'react';\r\nimport preLoaderIMG from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\ntype PreloaderType = {}\r\n\r\nfunction Preloader(props: PreloaderType) {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <img src={preLoaderIMG}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import {AppStateType} from \"../reduxStore\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getIsFetching = (state: AppStateType) => state.usersPage.isFetching\r\nexport const getFollowingInProgress = (state: AppStateType) => state.usersPage.followingInProgress\r\n/*//Reselect example\r\nexport const getUsersSuperSelector = createSelector(getUsersSelector, (users: Array<UsersType>) => users.filter(u => true))*/","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unFollow,\r\n    UsersStateType,\r\n    UsersType\r\n} from \"../../redux/UsersReducer/usersReducer\";\r\nimport UsersFunc from \"./UsersFunc\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/UsersReducer/usersSelectors\";\r\n\r\ntype UsersMapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UsersAPIPropsType = UsersMapDispatchToPropsType &\r\n    {\r\n        users: Array<UsersType>\r\n        pageSize: number\r\n        totalUsersCount: number\r\n        currentPage: number\r\n        isFetching: boolean\r\n        followingInProgress: Array<number>\r\n    }\r\n\r\nclass UsersAPIContainer extends React.Component<UsersAPIPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <UsersFunc {...this.props} onPageChange={this.onPageChange}/>\r\n        </>\r\n    }\r\n}\r\n\r\n/*const MapStateToProps = (state: AppStateType): UsersStateType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    };\r\n};*/\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage:getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    };\r\n};\r\n\r\nconst UsersContainer = connect(MapStateToProps,\r\n    {\r\n        follow, setCurrentPage, getUsers, unFollow\r\n    })(UsersAPIContainer);\r\n\r\nexport default UsersContainer;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    const onLogOutClick = () => {\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>You are logged in as: <span style={{textDecorationLine: 'underline'}}>{props.login}</span>\r\n                        <Button variant=\"outlined\" color={\"inherit\"} onClick={onLogOutClick} size={\"small\"} style={{marginLeft: '10px'}}>Log out</Button>\r\n                    </div>\r\n                    :<div>\r\n                        <Button variant={\"outlined\"} color={\"inherit\"} size={\"small\"}><NavLink to={'/login'}>Login</NavLink></Button>\r\n                        <Redirect to='/login'/>\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype HeaderContainerType = mapStateToPropsType & {\r\n    logout: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nconst HeaderConnect = connect(mapStateToProps, {logout})(HeaderContainer)\r\n\r\nexport default HeaderConnect;","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../common/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className={s.Login}>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({handleSubmit, captchaUrl, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Email'} name={'email'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <Field type={'password'} placeholder={'Password'} name={'password'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div className={s.rememberMe}>\r\n            <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n            <label htmlFor={'rememberMe'}>remember me</label>\r\n        </div>\r\n\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl && <div>\r\n            <Field placeholder={'Enter symbols from image'} name={'captcha'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>}\r\n\r\n        {error && <div className={s.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <button>Log in</button>\r\n        </div>\r\n    </form>\r\n}\r\n// @ts-ignore\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n//TYPES\r\ntype LoginFormPropsType  = {\r\n    captchaUrl: string | null\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginPropsType = mapStateToPropsType & {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}","import React from 'react';\r\nimport Preloader from \"../Components/common/preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};","import {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\n\r\ntype ListItemLinkPropsType = {\r\n    icon: any\r\n    primary: string\r\n    to: string\r\n    onItemClickHandler: () => void\r\n}\r\n\r\nexport function ListItemLink(props: ListItemLinkPropsType) {\r\n    const { icon, primary, to, onItemClickHandler,  } = props;\r\n   // const [isActive, setIsActive] = React.useState(false);\r\n\r\n\r\n    const CustomLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef((linkProps) => (\r\n                <NavLink to={to} {...linkProps} activeStyle={{backgroundColor: 'rgba(0, 0, 0, 0.08)'}}/>\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={CustomLink}>\r\n                <ListItemIcon onClick={() => {onItemClickHandler()}}>{icon}</ListItemIcon>\r\n                <ListItemText primary={primary} onClick={() => {onItemClickHandler()}}/>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport {ListItemLink} from \"../common/ListItemLink/ListItemLink\";\r\nimport HeaderConnect from \"../Header/Header.container\";\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            color: 'red',\r\n        },\r\n        appBar: {\r\n            backgroundColor: '#262626',\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        drawerHeader: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(0, 1),\r\n            // necessary for content to be below app bar\r\n            ...theme.mixins.toolbar,\r\n            justifyContent: 'flex-end',\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            marginLeft: -drawerWidth,\r\n        },\r\n        contentShift: {\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            marginLeft: 0,\r\n        },\r\n    }),\r\n);\r\n\r\nexport function NavigationBar(props: any) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Social Network\r\n                    </Typography>\r\n                    <HeaderConnect/>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    <ListItemLink to={\"/profile\"} icon={<AccountBoxIcon/>} primary={'Profile'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/dialogs\"} icon={<MailIcon/>} primary={'Messages'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/users\"} icon={<PeopleIcon/>} primary={'Users'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                </List>\r\n                <Divider/>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\"\nimport store, {AppStateType} from \"./redux/reduxStore\"\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderConnect from \"./Components/Header/Header.container\";\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {handleError, initializeApp} from \"./redux/appReducer/appReducer\";\nimport {WithSuspense} from \"./hoc/WithSuspense\";\nimport {NavigationBar} from \"./Components/NavigationBar/navigationBar\";\nimport {CircularProgress} from \"@material-ui/core\";\n\nconst Dialogs = React.lazy(() => import('./Components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\n\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllUnhandledRejections = (promiseRejectionEvent: any) => {\n        this.props.handleError(promiseRejectionEvent.reason.message)\n        console.log(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n\n            return <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress/>\n            </div>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <NavigationBar/>\n                <HeaderConnect/>\n                {/*<NavBar friends={store.getState().sideBar.friends}/>*/}\n                <div className=\"Container\">\n                    {/*ВСТАВИТЬ КНОПКУ С ЗАНУЛЕНИЕМ ОШИБКИ*/}\n                    {this.props.error && <div className='error'><h4>{this.props.error}</h4></div>}\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route path=\"/profile/:userId?\"\n                               render={WithSuspense(ProfileContainer)}/>\n                        <Route path=\"/dialogs\"\n                               render={WithSuspense(Dialogs)}/>\n                       {/* <Route path=\"/news\"\n                               render={() => <News/>}/>\n                        <Route path=\"/music\"\n                               render={() => <Music/>}/>\n                        <Route path=\"/settings\"\n                               render={() => <Settings/>}/>*/}\n                        <Route path=\"/users\"\n                               render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\"\n                               render={() => <Login/>}/>\n                        <Route path=\"*\" exact\n                               render={() => <div><h2>404 NOT FOUND</h2></div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    initialized: state.app.initialized,\n    error: state.app.error,\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp, handleError})(App);\n\nexport const MainApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\n//TYPES\ntype MapStateToPropsType = {\n    initialized: boolean\n    error: string | null\n}\ntype AppPropsType = MapStateToPropsType & {\n    initializeApp: () => void\n    handleError: (error: string | null) => void\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {usersAPI} from \"../../API/API\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'users/FOLLOW';\r\nconst UNFOLLOW = 'users/UNFOLLOW';\r\nconst SET_USERS = 'users/SET_USERS';\r\nconst SET_FRIENDS = 'users/SET_FRIENDS';\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n    friends: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n        case \"users/SET_FRIENDS\":\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userID)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//ACTIONS\r\nexport const followSuccess = (userID: number): FollowACType => ({type: FOLLOW, userID})\r\nexport const unFollowSuccess = (userID: number): UnFollowACType => ({type: UNFOLLOW, userID})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setFriends = (friends: Array<UsersType>) => ({type: SET_FRIENDS, friends}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountACtype => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingACtype => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userID: number): toggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    userID,\r\n    isFetching,\r\n})\r\n\r\n//FUNC\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let responseData = await apiMethod(userId)\r\n    if (responseData.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n//THUNKS\r\nexport const getUsers = (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let responseData = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(responseData.items))\r\n        dispatch(setTotalUsersCount(responseData.totalCount))\r\n    }\r\n\r\nexport const getFriends = (friend: boolean): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let responseData = await usersAPI.getFriends(friend)\r\n        dispatch(setFriends(responseData.items))\r\n    }\r\n\r\n\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.unFollow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, unFollowSuccess)\r\n    }\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.follow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n\r\nexport default usersReducer;\r\n//TYPES\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    friends: Array<UsersType>\r\n}\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: typeof UNFOLLOW,\r\n    userID: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport type setTotalUsersCountACtype = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport type toggleIsFetchingACtype = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type toggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean\r\n    userID: number\r\n}\r\nexport type UsersActionsType =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | setTotalUsersCountACtype\r\n    | toggleIsFetchingACtype\r\n    | toggleIsFollowingProgressACType\r\n    | ReturnType<typeof setFriends>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType>","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport const Textarea = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <TextField {...field.input} placeholder={field.placeholder} color={\"secondary\"}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const Input = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <input {...field.input} placeholder={field.placeholder} type={field.type}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype FieldType = {\r\n    meta: WrappedFieldMetaProps\r\n    /*{\r\n        touched: boolean\r\n        error: string\r\n    }*/\r\n    placeholder: string | undefined\r\n    type: string\r\n    input: string\r\n}","export const requiredField: FieldValidatorType = (value) =>  value ? undefined : 'field is required'\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType =>\r\n    (value: string) => (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__WdyDc\",\"error\":\"FormControls_error__V-zm-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__2cuDz\",\"avatar\":\"Users_avatar__2HfKL\"};"],"sourceRoot":""}