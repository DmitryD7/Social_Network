{"version":3,"sources":["Components/Login/Login.module.css","Components/Header/Header.module.css","assets/images/UserAvatar.png","redux/ProfileReducer/profileReducer.ts","redux/DialogsReducer/dialogsReducer.ts","redux/appReducer/appReducer.ts","API/API.ts","Components/Users/Paginator/Paginator.module.css","redux/reduxStore.ts","Components/Users/Paginator/Paginator.tsx","Components/Users/User/User.tsx","Components/Users/UsersFunc.tsx","redux/UsersReducer/usersSelectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/Header.container.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","Components/common/ListItemLink/ListItemLink.tsx","Components/NavigationBar/navigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/Users/Users.module.css","redux/AuthReducer/AuthReducer.ts","redux/UsersReducer/usersReducer.ts","Components/common/FormsControls/FormControls.tsx","Components/common/validators/Validators.tsx","Components/common/FormsControls/FormControls.module.css"],"names":["module","exports","ADD_POST","initialState","posts","id","message","likesCount","profile","contacts","photos","status","addPost","newPostBody","type","setUserStatus","getProfile","userID","dispatch","a","toggleIsFetching","profileAPI","responseData","getStatus","updateStatus","resultCode","saveAvatar","avatar","data","saveProfile","getState","userId","auth","toString","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","dialogs","name","addMessageActionCreator","newMessageBody","dialogsReducer","newMessage","initialized","error","isFetching","appReducer","initializeApp","getAuthUserData","then","handleError","setError","ResultCodeEnum","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","response","getFriends","friend","follow","post","unFollow","delete","put","formData","FormData","append","authAPI","getAuth","logIn","email","password","rememberMe","captcha","logOut","securityAPI","getCaptcha","reducers","combineReducers","profilePage","dialogsPage","usersPage","usersReducer","authReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","props","pagesCount","Math","ceil","totalItemsCount","portionCount","portionSize","useState","page","setPage","className","s","paginator","Pagination","count","onChange","event","value","onPageChange","siblingCount","boundaryCount","User","user","to","src","userPhotoSmall","userAvatar","alt","isUserFollowed","disabled","followingInProgress","some","onClick","userName","userStatus","UsersFunc","Users","totalUsersCount","usersBlock","users","map","u","key","small","followed","getUsersSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","UsersAPIContainer","pageNumber","this","React","Component","UsersContainer","connect","setCurrentPage","Header","header","loginBlock","isAuth","style","textDecorationLine","login","Button","variant","color","logout","size","marginLeft","HeaderContainer","HeaderConnect","maxLength30","maxLength","LoginReduxForm","reduxForm","handleSubmit","captchaUrl","onSubmit","Field","placeholder","component","Input","validate","requiredField","htmlFor","formSummaryError","Login","WithSuspense","Suspense","fallback","position","top","textAlign","width","CircularProgress","ListItemLink","icon","primary","onItemClickHandler","CustomLink","useMemo","forwardRef","linkProps","activeStyle","backgroundColor","ListItem","button","ListItemIcon","ListItemText","useStyles","makeStyles","theme","createStyles","root","display","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","NavigationBar","classes","useTheme","open","setOpen","handleDrawerClose","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Drawer","anchor","paper","direction","Divider","List","Dialogs","lazy","ProfileContainer","App","catchAllUnhandledRejections","promiseRejectionEvent","reason","console","log","addEventListener","removeEventListener","LinearProgress","path","exact","render","AppContainer","MainApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","setAuthUserData","setCaptchaUrl","Success","CaptchaIsRequired","getCaptchaUrl","url","FOLLOW","friends","followSuccess","unFollowSuccess","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","items","totalCount","bind","filter","Textarea","field","hasError","meta","touched","formControl","input","undefined"],"mappings":"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","file":"static/js/main.eceee99b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__swwEc\",\"formSummaryError\":\"Login_formSummaryError__3bWIJ\",\"rememberMe\":\"Login_rememberMe__1rtkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1StkQ\",\"loginBlock\":\"Header_loginBlock__1nhp4\"};","module.exports = __webpack_public_path__ + \"static/media/UserAvatar.fd4dd8c9.png\";","import {GetProfileResponseType, profileAPI, ProfilePhotosType} from \"../../API/API\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'profile/SET_USER_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\r\n\r\nexport let initialState: InitialStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are u?\", likesCount: 15},\r\n        {id: 2, message: \"It's my first post!\", likesCount: 20}\r\n    ] as Array<PostsType>,\r\n    profile: {\r\n        contacts: {},\r\n        photos: {}\r\n    } as GetProfileResponseType,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = {\r\n                id: 3,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const addPost = (newPostBody: string): AddPostType => ({type: ADD_POST, newPostBody})\r\nexport const setUserProfile = (profile: GetProfileResponseType): SetUserProfileType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\nexport const setUserStatus = (status: string): SetUserStatusType => ({type: SET_USER_STATUS, status})\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos}) as const\r\n\r\n//THUNKS\r\nexport const getProfile = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.getProfile(userID)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUserProfile(responseData))\r\n    }\r\n\r\nexport const getStatus = (userID: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const responseData = await profileAPI.getStatus(userID)\r\n        dispatch(setUserStatus(responseData))\r\n    }\r\n\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.updateStatus(status)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(setUserStatus(status))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n    }\r\n\r\nexport const saveAvatar = (avatar: File): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await profileAPI.saveAvatar(avatar)\r\n        if (responseData.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(responseData.data.photos))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n    }\r\n\r\nexport const saveProfile = (profile: GetProfileResponseType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const userId = getState().auth.id?.toString()\r\n        if (userId) {\r\n            const responseData = await profileAPI.saveProfile(profile)\r\n            if (responseData.resultCode === 0) {\r\n                dispatch(getProfile(userId))\r\n            } else {\r\n                const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n                // @ts-ignore\r\n                dispatch(stopSubmit('editProfile', {_error: message}))\r\n                return Promise.reject(responseData.messages[0])\r\n            }\r\n            dispatch(toggleIsFetching(false))\r\n        }\r\n    }\r\n\r\n\r\nexport default profileReducer;\r\n\r\n//TYPES\r\nexport type AddPostType = {\r\n    type: typeof ADD_POST,\r\n    newPostBody: string\r\n}\r\nexport type SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: any\r\n}\r\nexport type SetUserStatusType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n};\r\nexport type InitialStateType = {\r\n    posts: Array<PostsType>\r\n    profile: GetProfileResponseType\r\n    status: string\r\n}\r\nexport type ProfileActionsType =\r\n    | AddPostType\r\n    | SetUserProfileType\r\n    | SetUserStatusType\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, ProfileActionsType & any>","import {DialogsPageType, messagesType} from \"../store\";\r\n\r\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Hanna\"},\r\n        {id: 4, name: \"Lesha\"},\r\n        {id: 5, name: \"Anton\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Check Info\"},\r\n        {id: 3, message: \"How is your studying in REACT\"},\r\n        {id: 4, message: \"Hey Yo\"},\r\n        {id: 5, message: \"Good morning\"}\r\n    ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: messagesType = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string): AddMessageActionCreatorType => ({type: ADD_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer;\r\n\r\n//TYPES\r\nexport type AddMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport type DialogActionsType = AddMessageActionCreatorType\r\n","import {getAuthUserData} from \"../AuthReducer/AuthReducer\";\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'app/SET_INITIALIZED_SUCCESS';\r\nconst SET_ERROR = 'app/SET_ERROR';\r\nconst TOGGLE_IS_FETCHING = 'app/TOGGLE_IS_FETCHING';\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    initialized: false,\r\n    error: null,\r\n    isFetching: false,\r\n};\r\n\r\nexport const appReducer = (state: AuthInitialStateType = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setInitializedSuccess = () => ({type: SET_INITIALIZED_SUCCESS} as const)\r\nexport const setError = (error: string | null) => ({type: SET_ERROR, error} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\n\r\n//THUNKS\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuthUserData())\r\n        .then(() => {\r\n            dispatch(setInitializedSuccess())\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n}\r\nexport const handleError = (error: string | null) => (dispatch: any) => {\r\n    dispatch(setError(error))\r\n}\r\n//TYPES\r\nexport type ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setInitializedSuccess>\r\n    | ReturnType<typeof setError>\r\n    | ToggleIsFetchingType\r\n\r\nexport type AuthInitialStateType = {\r\n    initialized: boolean\r\n    error: string | null\r\n    isFetching: boolean\r\n}","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": 'e25ce395-7836-43e0-9416-1f8978f20c93'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    getFriends(friend: boolean = true) {\r\n        return instance.get<GetUsersResponseType>(`users?friend=${friend}`,).then((response: AxiosResponse) => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<CommonResponseType>(`follow/${id}`, {},).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: string) {\r\n        return instance.get<GetProfileResponseType>(`profile/${userID}`).then(response => response.data)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get<string>(`profile/status/${userID}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`profile/status/`, {status}).then(response => response.data)\r\n    },\r\n    saveAvatar(avatar: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', avatar)\r\n        return instance.put<CommonResponseType<{ photos: ProfilePhotosType }>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: GetProfileResponseType) {\r\n        return instance.put<CommonResponseType>(`profile`, profile).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth () {\r\n        return instance.get<CommonResponseType<DataAuthResponseType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    logIn (email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data)\r\n    },\r\n    logOut () {\r\n        return instance.delete<CommonResponseType>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n// TYPES\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type GetProfileResponseType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: ProfilePhotosType\r\n    aboutMe: string\r\n}\r\n\r\nexport type DataAuthResponseType =  {\r\n    id: number | null\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2D4Jk\"};","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer/profileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer/dialogsReducer\";\r\nimport usersReducer from \"./UsersReducer/usersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./appReducer/appReducer\";\r\nimport {authReducer} from \"./AuthReducer/AuthReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport { Pagination } from '@material-ui/lab'\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n    const portionCount = Math.ceil(pagesCount / (props.portionSize))\r\n    const [page, setPage] = useState(1)\r\n\r\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setPage(value);\r\n        props.onPageChange(value)\r\n    };\r\n\r\n    return <div className={s.paginator}>\r\n       <Pagination count={portionCount} onChange={handleChange} page={page} siblingCount={5} boundaryCount={1}/>\r\n    </div>\r\n}\r\n\r\n/*const myPaginator = () => {\r\n    const pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = [] as Array<number>\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPagePortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPagePortionNumber = portionNumber * props.portionSize\r\n\r\n    return <div>\r\n        {/!*{portionNumber > 1 &&\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPagePortionNumber && p<= rightPagePortionNumber)\r\n            .map((p, i) => <span\r\n            key={i}\r\n            className={props.currentPage === p ? s.selectedPage : s.pages}\r\n            onClick={() => {\r\n                props.onPageChange(p)\r\n            }}\r\n        >{p}</span>)}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}*!/}\r\n    </div>\r\n}*/\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    onPageChange: (pageNumber: number) => void\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userAvatar from '../../../assets/images/UserAvatar.png'\r\nimport s from \"../Users.module.css\";\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return <div className={s.user}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + props.userId}>\r\n                            <img src={props.userPhotoSmall !== null ? props.userPhotoSmall : userAvatar}\r\n                                 alt=\"avatar\"\r\n                                 className={s.avatar}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {props.isUserFollowed\r\n                            ? <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.unFollow(props.userId)\r\n                                }}\r\n                            >UnFollow</button>\r\n                            : <button\r\n                                disabled={props.followingInProgress.some(id => id === props.userId)}\r\n                                onClick={() => {\r\n                                    props.follow(props.userId)\r\n                                }}\r\n                            >Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{props.userName}</div>\r\n                        <div>{props.userStatus}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\ntype UserPropsType = {\r\n    userId: number\r\n    userPhotoSmall: string\r\n    userName: string\r\n    userStatus: string\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    isUserFollowed: boolean\r\n}","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport {Paginator} from \"./Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\ntype UsersFuncType = {\r\n    users: Array<UsersType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst UsersFunc = (props: UsersFuncType) => {\r\n\r\n    return (\r\n        <div className={s.Users}>\r\n            <div className={s.paginator}>\r\n                <Paginator totalItemsCount={props.totalUsersCount}\r\n                           pageSize={props.pageSize}\r\n                           onPageChange={props.onPageChange}\r\n                           portionSize={10}\r\n                />\r\n            </div>\r\n            <div className={s.usersBlock}>\r\n                {props.users.map(u => <User key={u.id} userId={u.id} userPhotoSmall={u.photos.small} userName={u.name}\r\n                                            userStatus={u.status} follow={props.follow} unFollow={props.unFollow}\r\n                                            followingInProgress={props.followingInProgress}\r\n                                            isUserFollowed={u.followed}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersFunc;","import {AppStateType} from \"../reduxStore\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getFollowingInProgress = (state: AppStateType) => state.usersPage.followingInProgress\r\n/*//Reselect example\r\nexport const getUsersSuperSelector = createSelector(getUsersSelector, (users: Array<UsersType>) => users.filter(u => true))*/","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {follow, getUsers, setCurrentPage, unFollow, UsersType} from \"../../redux/UsersReducer/usersReducer\";\r\nimport UsersFunc from \"./UsersFunc\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/UsersReducer/usersSelectors\";\r\nimport s from \"./Users.module.css\";\r\n\r\ntype UsersMapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UsersAPIPropsType = UsersMapDispatchToPropsType &\r\n    {\r\n        users: Array<UsersType>\r\n        pageSize: number\r\n        totalUsersCount: number\r\n        currentPage: number\r\n        followingInProgress: Array<number>\r\n    }\r\n\r\nclass UsersAPIContainer extends React.Component<UsersAPIPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <div className={s.UsersAPIContainer}>\r\n            <UsersFunc {...this.props} onPageChange={this.onPageChange}/>\r\n        </div>\r\n    }\r\n}\r\n\r\n/*const MapStateToProps = (state: AppStateType): UsersStateType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    };\r\n};*/\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    };\r\n};\r\n\r\nconst UsersContainer = connect(MapStateToProps,\r\n    {\r\n        follow, setCurrentPage, getUsers, unFollow\r\n    })(UsersAPIContainer);\r\n\r\nexport default UsersContainer;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    const onLogOutClick = () => {\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>You are logged in as: <span style={{textDecorationLine: 'underline'}}>{props.login}</span>\r\n                        <Button variant=\"outlined\" color={\"inherit\"} onClick={onLogOutClick} size={\"small\"} style={{marginLeft: '10px'}}>Log out</Button>\r\n                    </div>\r\n                    :<div>\r\n                        <Button variant={\"outlined\"} color={\"inherit\"} size={\"small\"}><NavLink to={'/login'}>Login</NavLink></Button>\r\n                        <Redirect to='/login'/>\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype HeaderContainerType = mapStateToPropsType & {\r\n    logout: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nconst HeaderConnect = connect(mapStateToProps, {logout})(HeaderContainer)\r\n\r\nexport default HeaderConnect;","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../common/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/AuthReducer/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className={s.Login}>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({handleSubmit, captchaUrl, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Email'} name={'email'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <Field type={'password'} placeholder={'Password'} name={'password'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>\r\n        <div className={s.rememberMe}>\r\n            <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n            <label htmlFor={'rememberMe'}>remember me</label>\r\n        </div>\r\n\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl && <div>\r\n            <Field placeholder={'Enter symbols from image'} name={'captcha'} component={Input}\r\n                   validate={[requiredField, maxLength30]}/>\r\n        </div>}\r\n\r\n        {error && <div className={s.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <button>Log in</button>\r\n        </div>\r\n    </form>\r\n}\r\n// @ts-ignore\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n//TYPES\r\ntype LoginFormPropsType  = {\r\n    captchaUrl: string | null\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginPropsType = mapStateToPropsType & {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}","import React from 'react';\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={\"secondary\"}/>\r\n        </div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};","import {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\n\r\ntype ListItemLinkPropsType = {\r\n    icon: any\r\n    primary: string\r\n    to: string\r\n    onItemClickHandler: () => void\r\n}\r\n\r\nexport function ListItemLink(props: ListItemLinkPropsType) {\r\n    const { icon, primary, to, onItemClickHandler,  } = props;\r\n   // const [isActive, setIsActive] = React.useState(false);\r\n\r\n\r\n    const CustomLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef((linkProps) => (\r\n                <NavLink to={to} {...linkProps} activeStyle={{backgroundColor: 'rgba(0, 0, 0, 0.08)'}}/>\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={CustomLink}>\r\n                <ListItemIcon onClick={() => {onItemClickHandler()}}>{icon}</ListItemIcon>\r\n                <ListItemText primary={primary} onClick={() => {onItemClickHandler()}}/>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport {ListItemLink} from \"../common/ListItemLink/ListItemLink\";\r\nimport HeaderConnect from \"../Header/Header.container\";\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            color: 'red',\r\n        },\r\n        appBar: {\r\n            backgroundColor: '#262626',\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        drawerHeader: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(0, 1),\r\n            // necessary for content to be below app bar\r\n            ...theme.mixins.toolbar,\r\n            justifyContent: 'flex-end',\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            marginLeft: -drawerWidth,\r\n        },\r\n        contentShift: {\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            marginLeft: 0,\r\n        },\r\n    }),\r\n);\r\n\r\nexport function NavigationBar(props: any) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Social Network\r\n                    </Typography>\r\n                    <HeaderConnect/>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    <ListItemLink to={\"/profile\"} icon={<AccountBoxIcon/>} primary={'Profile'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/dialogs\"} icon={<MailIcon/>} primary={'Messages'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                    <ListItemLink to={\"/users\"} icon={<PeopleIcon/>} primary={'Users'}\r\n                                  onItemClickHandler={handleDrawerClose}/>\r\n                </List>\r\n                <Divider/>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\"\nimport store, {AppStateType} from \"./redux/reduxStore\"\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderConnect from \"./Components/Header/Header.container\";\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {handleError, initializeApp} from \"./redux/appReducer/appReducer\";\nimport {WithSuspense} from \"./hoc/WithSuspense\";\nimport {NavigationBar} from \"./Components/NavigationBar/navigationBar\";\nimport {CircularProgress, LinearProgress} from \"@material-ui/core\";\n\nconst Dialogs = React.lazy(() => import('./Components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\n\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllUnhandledRejections = (promiseRejectionEvent: any) => {\n        this.props.handleError(promiseRejectionEvent.reason.message)\n        console.log(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledRejections)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress color={\"secondary\"}/>\n            </div>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <NavigationBar/>\n                <HeaderConnect/>\n                {this.props.isFetching ? <div className='preLoader'><LinearProgress color={\"secondary\"}/></div> : null}\n                {console.log('IS FETCHING: ', this.props.isFetching)}\n                <div className=\"Container\">\n                    {/*ВСТАВИТЬ КНОПКУ С ЗАНУЛЕНИЕМ ОШИБКИ*/}\n                    {this.props.error && <div className='error'><h4>{this.props.error}</h4></div>}\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route path=\"/profile/:userId?\"\n                               render={WithSuspense(ProfileContainer)}/>\n                        <Route path=\"/dialogs\"\n                               render={WithSuspense(Dialogs)}/>\n                        <Route path=\"/users\"\n                               render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\"\n                               render={() => <Login/>}/>\n                        <Route path=\"*\" exact\n                               render={() => <div><h2>404 NOT FOUND</h2></div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    initialized: state.app.initialized,\n    error: state.app.error,\n    isFetching: state.app.isFetching,\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp, handleError})(App);\n\nexport const MainApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\n//TYPES\ntype MapStateToPropsType = {\n    initialized: boolean\n    error: string | null\n    isFetching: boolean\n}\ntype AppPropsType = MapStateToPropsType & {\n    initializeApp: () => void\n    handleError: (error: string | null) => void\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__2cuDz\",\"paginator\":\"Users_paginator__1EjyK\",\"usersBlock\":\"Users_usersBlock__TolGs\",\"user\":\"Users_user__MMNbl\",\"avatar\":\"Users_avatar__2HfKL\"};","import {authAPI, DataAuthResponseType, ResultCodeEnum, securityAPI} from \"../../API/API\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst TOGGLE_IS_FETCHING = 'auth/TOGGLE_IS_FETCHING';\r\nconst SET_CAPTCHA_URL = 'auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState: authInitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state: authInitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        }\r\n        case \"auth/SET_CAPTCHA_URL\":\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAuthUserData = (data: DataAuthResponseType): setUserDataACType => ({type: SET_USER_DATA, data})\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({type: SET_CAPTCHA_URL, captchaUrl}) as const\r\n\r\n//THUNKS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await authAPI.getAuth()\r\n    dispatch(toggleIsFetching(false))\r\n    if (responseData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData({...responseData.data, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, AppStateType, any, UsersActionsType & any> =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logIn(email, password, rememberMe, captcha)\r\n        dispatch(toggleIsFetching(false))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n        else {\r\n            if (responseData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const message = responseData.messages.length > 0 ? responseData.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const responseData = await securityAPI.getCaptcha()\r\n    dispatch(toggleIsFetching(false))\r\n    const captchaUrl = responseData.data.url\r\n    dispatch(setCaptchaUrl(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const responseData = await authAPI.logOut()\r\n        dispatch(toggleIsFetching(true))\r\n        if (responseData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setAuthUserData({isAuth: false, email: '', id: null, login: ''}))\r\n        }\r\n\r\n    }\r\n\r\n//TYPES\r\nexport type setUserDataACType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: DataAuthResponseType\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport type authInitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nexport type UsersActionsType =\r\n    setUserDataACType\r\n    | toggleIsFetchingACType\r\n    | ReturnType<typeof setCaptchaUrl>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType & any>","import {usersAPI} from \"../../API/API\";\r\nimport {AppStateType} from \"../reduxStore\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {toggleIsFetching} from \"../appReducer/appReducer\";\r\n\r\nconst FOLLOW = 'users/FOLLOW';\r\nconst UNFOLLOW = 'users/UNFOLLOW';\r\nconst SET_USERS = 'users/SET_USERS';\r\nconst SET_FRIENDS = 'users/SET_FRIENDS';\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 6,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    followingInProgress: [],\r\n    friends: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n        case SET_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userID)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//ACTIONS\r\nexport const followSuccess = (userID: number): FollowACType => ({type: FOLLOW, userID})\r\nexport const unFollowSuccess = (userID: number): UnFollowACType => ({type: UNFOLLOW, userID})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersACType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setFriends = (friends: Array<UsersType>) => ({type: SET_FRIENDS, friends}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountACtype => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userID: number): toggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    userID,\r\n    isFetching,\r\n})\r\n\r\n//FUNC\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let responseData = await apiMethod(userId)\r\n    if (responseData.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n//THUNKS\r\nexport const getUsers = (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let responseData = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(responseData.items))\r\n        dispatch(setTotalUsersCount(responseData.totalCount))\r\n    }\r\n\r\nexport const getFriends = (friend: boolean): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let responseData = await usersAPI.getFriends(friend)\r\n        dispatch(setFriends(responseData.items))\r\n    }\r\n\r\n\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.unFollow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, unFollowSuccess)\r\n    }\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        const apiMethod = usersAPI.follow.bind(usersAPI)\r\n        followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n\r\nexport default usersReducer;\r\n//TYPES\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    name: string\r\n    status: string\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n    friends: Array<UsersType>\r\n}\r\nexport type FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userID: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: typeof UNFOLLOW,\r\n    userID: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UsersType>\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport type setTotalUsersCountACtype = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\nexport type toggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean\r\n    userID: number\r\n}\r\nexport type UsersActionsType =\r\n    FollowACType\r\n    | UnFollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | setTotalUsersCountACtype\r\n    | toggleIsFollowingProgressACType\r\n    | ReturnType<typeof setFriends>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, any, UsersActionsType & any>","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport const Textarea = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <TextField {...field.input} placeholder={field.placeholder} color={\"secondary\"}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const Input = (field: FieldType) => {\r\n    const hasError = field.meta.touched && field.meta.error\r\n\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <input {...field.input} placeholder={field.placeholder} type={field.type}/>\r\n        <div>\r\n            {hasError && <span>{field.meta.error}</span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype FieldType = {\r\n    meta: WrappedFieldMetaProps\r\n    /*{\r\n        touched: boolean\r\n        error: string\r\n    }*/\r\n    placeholder: string | undefined\r\n    type: string\r\n    input: string\r\n}","export const requiredField: FieldValidatorType = (value) =>  value ? undefined : 'field is required'\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType =>\r\n    (value: string) => (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__WdyDc\",\"error\":\"FormControls_error__V-zm-\"};"],"sourceRoot":""}