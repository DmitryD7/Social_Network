{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/Post/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","ProfileStatus","onBlur","updateStatus","value","autoFocus","onChange","e","currentTarget","onDoubleClick","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","onSubmit","Field","placeholder","name","component","Input","validate","requiredField","Textarea","type","Object","keys","contacts","map","key","contact","formSummaryError","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userAvatar","mainAvatar","isOwner","files","length","saveAvatar","formData","saveProfile","then","initialValues","activateEditMode","ProfileData","onClick","fullName","aboutMe","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","Contact","Post","item","alt","message","likesCount","maxLength10","maxLength","AddPostFormRedux","MyPosts","React","memo","postsElements","posts","p","id","onAddPost","useCallback","values","addPost","newPostBody","PostsBlock","MyPostsContainer","connect","state","profilePage","dispatch","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.9f08bb16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3OrvS\",\"mainAvatar\":\"ProfileInfo_mainAvatar__3lXd8\",\"contact\":\"ProfileInfo_contact__1ij0M\",\"formSummaryError\":\"ProfileInfo_formSummaryError__1fHbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileStatus\":\"ProfileStatus_ProfileStatus__3EJxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostsBlock\":\"MyPosts_PostsBlock__MRVJj\",\"posts\":\"MyPosts_posts__2Z5yQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__34bwU\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (status !== props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status])\r\n\r\n    return <div>\r\n        {!editMode\r\n            ? <div className={s.ProfileStatus}>\r\n               <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            : <div className={s.ProfileStatus}>\r\n                <input\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                    autoFocus\r\n                    onChange={onStatusChange}\r\n                />\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormControls\";\r\nimport {requiredField} from \"../../common/validators/Validators\";\r\nimport {GetProfileResponseType} from \"../../../API/API\";\r\nimport s from './ProfileInfo.module.css';\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    LookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\ntype PropsType = {\r\n    profile: GetProfileResponseType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <h3>ABOUT ME:</h3>\r\n        <div>\r\n            <b>Full name:</b> <Field placeholder={'Full name'} name={'fullName'} component={Input}\r\n                                     validate={[requiredField]}/>\r\n        </div>\r\n        <div>\r\n            <b>About me:</b> <Field\r\n            component={Textarea}\r\n            name={'aboutMe'}\r\n            placeholder={'Enter some info about yourself:'}\r\n            validate={[requiredField]}\r\n        />\r\n        </div>\r\n        <hr/>\r\n        <div>\r\n            <b>Is looking for a job:</b> <Field type={'checkbox'} name={'lookingForAJob'} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>My professional skills:</b> <Field\r\n            component={Textarea}\r\n            name={'lookingForAJobDescription'}\r\n            placeholder={'Enter your skills:'}\r\n            validate={[requiredField]}\r\n        />\r\n        </div>\r\n        <h4>Contacts:</h4>\r\n            <div>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={s.contact}>\r\n                        <b>{key}</b>: <Field key={key} placeholder={key} name={`contacts.${key}`} component={Input}/>\r\n                    </div>\r\n                    }\r\n                )}\r\n            </div>\r\n        {error && <div className={s.formSummaryError}>{error}</div>}\r\n        <button>Save</button>\r\n        <hr/>\r\n    </form>\r\n}\r\n\r\n// @ts-ignore\r\nexport const ProfileDataFormRedux = reduxForm<ProfileDataFormType, PropsType>({form: 'editProfile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ContactsType, GetProfileResponseType} from \"../../../API/API\";\r\nimport {ProfileStatusHooks} from \"./ProfileStatus/ProfileStatusHooks\";\r\nimport userAvatar from '../../../assets/images/UserAvatar.png'\r\nimport {ProfileDataFormRedux, ProfileDataFormType} from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsTypes) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainAvatarSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            props.saveAvatar(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = (formData: ProfileDataFormType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userAvatar} className={s.mainAvatar}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainAvatarSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormRedux onSubmit={onSubmitHandler} initialValues={props.profile} profile={props.profile}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                                   activateEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}/>}\r\n                <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ProfileInfo;\r\n\r\ntype ProfileDataType = {\r\n    profile: GetProfileResponseType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return <div>\r\n        <div>\r\n            {props.isOwner && <button onClick={props.activateEditMode}>edit</button>}\r\n        </div>\r\n        <div>\r\n            <h3>ABOUT ME:</h3>\r\n            <div><b>Full name:</b> {props.profile.fullName} </div>\r\n            <div><b>About me:</b> {props.profile.aboutMe}</div>\r\n            <h4>Contacts:</h4>\r\n            <div>\r\n                {Object.keys(props.profile.contacts).map(key => <Contact key={key} contactTitle={key}\r\n                                                                         contactValue={props.profile.contacts[key as keyof ContactsType]}/>)}\r\n            </div>\r\n        </div>\r\n        <hr/>\r\n        <div>\r\n            <div><b>Is looking for a job:</b> {props.profile.lookingForAJob ? 'yes' : 'no'} </div>\r\n            <div><b>My professional skills:</b> {props.profile.lookingForAJobDescription}</div>\r\n        </div>\r\n        <hr/>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = (props: ContactType) => {\r\n    return <div className={s.contact}>\r\n        <b>{props.contactTitle}: {props.contactValue}</b>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileInfoPropsTypes = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    saveAvatar: (avatar: File) => void\r\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype postPropsType = {\r\n    message: string,\r\n    likesCount: number,\r\n}\r\n\r\nconst Post = (props: postPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div><span>Likes {props.likesCount} </span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../../common/validators/Validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormControls\";\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name={'newPostBody'}\r\n                placeholder={'Enter post text'}\r\n                validate={[requiredField, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'ProfileAddNewPostForm'})(AddPostForm)","import React, {useCallback} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostFormDataType, AddPostFormRedux} from \"./Post/AddPostForm\";\r\nimport {PostsType} from \"../../../redux/ProfileReducer/profileReducer\";\r\n\r\nexport const MyPosts = React.memo((props: myPostsType) => {\r\n    const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>)\r\n\r\n    const onAddPost = useCallback((values: AddPostFormDataType) => {\r\n        props.addPost(values.newPostBody);\r\n    }, [props]);\r\n\r\n\r\n    return (\r\n        <div className={s.PostsBlock}>\r\n            <h3>My posts:</h3>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype myPostsType = {\r\n    posts: Array<PostsType>,\r\n    addPost: (newPostBody: string) => void,\r\n}","import React from 'react';\r\nimport {addPost, PostsType} from \"../../../redux/ProfileReducer/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\ntype MyPostsMapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\ntype MyPostsMapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MyPostsMapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: any): MyPostsMapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPost(newPostBody))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nimport {GetProfileResponseType} from \"../../API/API\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePagePropsType = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    saveAvatar: (avatar: File) => void\r\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\r\n};\r\n\r\nfunction Profile(props: ProfilePagePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                saveAvatar={props.saveAvatar}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, saveAvatar, saveProfile, updateStatus} from \"../../redux/ProfileReducer/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {GetProfileResponseType} from \"../../API/API\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    saveAvatar: (avatar: File) => void\r\n    saveProfile: (formData: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype ProfileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId){\r\n            userId = this.props.authorizedUserId\r\n            if (!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        this.props.match.params.userId !== prevProps.match.params.userId && this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, saveAvatar, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}