{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/Post/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","ProfileStatus","onBlur","updateStatus","value","autoFocus","onChange","e","currentTarget","onDoubleClick","ProfileInfo","profile","descriptionBlock","src","photos","large","lookingForAJob","lookingForAJobDescription","fullName","Preloader","Post","item","alt","message","likesCount","maxLength10","maxLength","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","React","memo","postsElements","posts","map","p","key","id","onAddPost","useCallback","values","addPost","newPostBody","PostsBlock","MyPostsContainer","connect","state","profilePage","dispatch","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,cAAgB,uC,oBCAlCD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,iJCOZC,EAAqB,SAACC,GAA8B,IAAD,EAE5BC,oBAAkB,GAFU,mBAErDC,EAFqD,KAE3CC,EAF2C,OAGhCF,mBAASD,EAAMI,QAHiB,mBAGrDA,EAHqD,KAG7CC,EAH6C,KAsB5D,OANAC,qBAAU,WACFF,IAAWJ,EAAMI,QACjBC,EAAUL,EAAMI,UAErB,CAACJ,EAAMI,SAEH,6BACDF,EAII,yBAAKK,UAAWC,IAAEC,eAChB,2BACIC,OArBW,WACvBP,GAAY,GACZH,EAAMW,aAAaP,IAoBPQ,MAAOR,EACPS,WAAS,EACTC,SApBO,SAACC,GACpBV,EAAUU,EAAEC,cAAcJ,WAWpB,yBAAKL,UAAWC,IAAEC,eAChB,0BAAMQ,cApBO,WACrBd,GAAY,KAmBoCH,EAAMI,QAAU,cCAzDc,EAnBK,SAAClB,GAAkC,IAAD,EAClD,OAAKA,EAAMmB,QAIP,6BACI,yBAAKZ,UAAWC,IAAEY,kBACd,yBAAKC,IAAG,UAAErB,EAAMmB,QAAQG,cAAhB,aAAE,EAAsBC,QAChC,0CAAe,6BAAf,0BAA4CvB,EAAMmB,QAAQK,eAAiB,MAAQ,KAAnF,IAAyF,6BAAzF,iBAA6GxB,EAAMmB,QAAQM,2BAAgC,6BAC3J,0CAAe,6BAAf,eAAiCzB,EAAMmB,QAAQO,UAC/C,6BAEA,kBAAC,EAAD,CAAoBtB,OAAQJ,EAAMI,OAAQO,aAAcX,EAAMW,iBAV/D,kBAACgB,EAAA,EAAD,O,oDCEAC,EAVF,SAAC5B,GACV,OACI,yBAAKO,UAAWC,IAAEqB,MACd,yBAAKR,IAAI,oEAAoES,IAAI,WAChF9B,EAAM+B,QACP,6BAAK,uCAAa/B,EAAMgC,WAAnB,Q,kCCJXC,EAAcC,YAAU,IAiBjBC,EAAmBC,YAA+B,CAACC,KAAM,yBAAtCD,EAfsC,SAACpC,GACnE,OAAO,0BAAMsC,SAAUtC,EAAMuC,cACzB,6BACI,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,KAAM,cACNC,YAAa,kBACbC,SAAU,CAACC,IAAeb,MAElC,6BACI,iDCfCc,EAAUC,IAAMC,MAAK,SAACjD,GAC/B,IAAMkD,EAAgBlD,EAAMmD,MAAMC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMtB,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,WAAYsB,IAAKD,EAAEE,QAEhGC,EAAYC,uBAAY,SAACC,GAC3B1D,EAAM2D,QAAQD,EAAOE,eACtB,CAAC5D,IAGJ,OACI,yBAAKO,UAAWC,IAAEqD,YACd,yCACA,kBAAC1B,EAAD,CAAkBG,SAAUkB,IAC5B,yBAAKjD,UAAWC,IAAE2C,OACbD,OCWFY,EAFUC,aAdD,SAACC,GACrB,MAAO,CACHb,MAAOa,EAAMC,YAAYd,UAIN,SAACe,GACxB,MAAO,CACHP,QAAS,SAACC,GACNM,EAASP,YAAQC,QAKJG,CAA6ChB,GCPvDoB,MATf,SAAiBnE,GACb,OACI,6BACI,kBAAC,EAAD,CAAamB,QAASnB,EAAMmB,QAASf,OAAQJ,EAAMI,OAAQO,aAAcX,EAAMW,eAC/E,kBAAC,EAAD,Q,eCaNyD,E,kLAEE,IAAIC,EAASC,KAAKtE,MAAMuE,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKtE,MAAMyE,mBAEhBH,KAAKtE,MAAM0E,QAAQC,KAAK,UAGhCL,KAAKtE,MAAM4E,WAAWP,GACtBC,KAAKtE,MAAM6E,UAAUR,K,+BAIrB,OAAO,kBAAC,EAAYC,KAAKtE,W,GAdFgD,IAAM8B,WAyBtBC,sBACXhB,aARoB,SAACC,GAAD,MAA+C,CACnE7C,QAAS6C,EAAMC,YAAY9C,QAC3Bf,OAAQ4D,EAAMC,YAAY7D,OAC1BqE,iBAAkBT,EAAMgB,KAAKzB,GAC7B0B,OAAQjB,EAAMgB,KAAKC,UAIM,CAACL,eAAYC,cAAWlE,mBACjDuE,IAFWH,CAGbX","file":"static/js/3.2afd4d7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3OrvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileStatus\":\"ProfileStatus_ProfileStatus__3EJxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostsBlock\":\"MyPosts_PostsBlock__MRVJj\",\"posts\":\"MyPosts_posts__2Z5yQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__34bwU\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (status !== props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status])\r\n\r\n    return <div>\r\n        {!editMode\r\n            ? <div className={s.ProfileStatus}>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            : <div className={s.ProfileStatus}>\r\n                <input\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                    autoFocus\r\n                    onChange={onStatusChange}\r\n                />\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport {GetProfileResponseType} from \"../../../API/API\";\r\nimport {ProfileStatusHooks} from \"./ProfileStatus/ProfileStatusHooks\";\r\n\r\n\r\ntype ProfileInfoPropsTypes = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsTypes) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos?.large}/>\r\n                <div>ABOUT JOB <br/> Is looking for a job: {props.profile.lookingForAJob ? 'yes' : 'no'} <br/> Description: {props.profile.lookingForAJobDescription}</div><hr/>\r\n                <div>ABOUT ME: <br/> Full name: {props.profile.fullName}</div>\r\n                <hr/>\r\n                {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n                <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype postPropsType = {\r\n    message: string,\r\n    likesCount: number,\r\n}\r\n\r\nconst Post = (props: postPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-370-456322.png\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div><span>Likes {props.likesCount} </span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../../common/validators/Validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormControls\";\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name={'newPostBody'}\r\n                placeholder={'Enter post text'}\r\n                validate={[requiredField, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'ProfileAddNewPostForm'})(AddPostForm)","import React, {useCallback} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostFormDataType, AddPostFormRedux} from \"./Post/AddPostForm\";\r\nimport {PostsType} from \"../../../redux/ProfileReducer/profileReducer\";\r\n\r\nexport const MyPosts = React.memo((props: myPostsType) => {\r\n    const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>)\r\n\r\n    const onAddPost = useCallback((values: AddPostFormDataType) => {\r\n        props.addPost(values.newPostBody);\r\n    }, [props]);\r\n\r\n\r\n    return (\r\n        <div className={s.PostsBlock}>\r\n            <h3>My posts:</h3>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype myPostsType = {\r\n    posts: Array<PostsType>,\r\n    addPost: (newPostBody: string) => void,\r\n}","import React from 'react';\r\nimport {addPost, PostsType} from \"../../../redux/ProfileReducer/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\ntype MyPostsMapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\ntype MyPostsMapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MyPostsMapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: any): MyPostsMapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPost(newPostBody))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nimport {GetProfileResponseType} from \"../../API/API\";\r\n\r\ntype ProfilePagePropsType = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n};\r\n\r\nfunction Profile(props: ProfilePagePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, updateStatus} from \"../../redux/ProfileReducer/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {GetProfileResponseType} from \"../../API/API\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: GetProfileResponseType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype ProfileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId){\r\n            userId = this.props.authorizedUserId\r\n            if (!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}